{
  "address": "0x001C52e9D97D4886a28866CaCE9Ae99d6CF37BE1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBet",
          "type": "uint256"
        }
      ],
      "name": "MaxBetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeAddress",
          "type": "address"
        }
      ],
      "name": "POLAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "POLFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "raceId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prediction",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "raceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "RaceEnd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "raceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        }
      ],
      "name": "RaceStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeAddress",
          "type": "address"
        }
      ],
      "name": "RevenueAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "RevenueFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "RewarderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "raceId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prediction",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolTotal",
          "type": "uint256"
        }
      ],
      "name": "Wagered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "raceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "raceId",
          "type": "uint256"
        }
      ],
      "name": "betsOnRace",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "raceId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "place",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            }
          ],
          "internalType": "struct Exotic.Bet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betsPerRace",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "endRace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frequency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_randomProviderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_jackpotContribution",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_jackpotAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBet",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jackpotAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jackpotContribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRaceId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "result",
          "type": "uint256[]"
        }
      ],
      "name": "odds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "payout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raceId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "prediction",
          "type": "uint256[]"
        }
      ],
      "name": "placeBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "race",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalWagered",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raceId",
          "type": "uint256"
        }
      ],
      "name": "raceResult",
      "outputs": [
        {
          "internalType": "uint256[6]",
          "name": "",
          "type": "uint256[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomProvider",
      "outputs": [
        {
          "internalType": "contract IRandomProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "contract IRewarder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "raceId",
          "type": "uint256"
        }
      ],
      "name": "startRace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxBet",
          "type": "uint256"
        }
      ],
      "name": "updateMaxBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "updatePOLAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "updatePOLFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "updateRevenueAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "updateRevenueFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "updateRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "userBet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "raceId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "place",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            }
          ],
          "internalType": "struct Exotic.Bet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userBetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x857898cb74bfe3345a93cac5846407686d0e1532a5a4f1a154872a725bfa425d",
  "receipt": {
    "to": null,
    "from": "0x1604F1c0aF9765D940519cd2593292b3cE3Ba3CE",
    "contractAddress": "0x001C52e9D97D4886a28866CaCE9Ae99d6CF37BE1",
    "transactionIndex": 2,
    "gasUsed": "3842717",
    "logsBloom": "0x
    "blockHash": "0xe4d57e50dab10c9108f9007006d9c732e0ecfd8b3dd583135fce80699e3acf25",
    "transactionHash": "0x857898cb74bfe3345a93cac5846407686d0e1532a5a4f1a154872a725bfa425d",
    "logs": [],
    "blockNumber": 11244699,
    "cumulativeGasUsed": "4217388",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "52e06e075ba5652ca8bd5230a5a9617a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBet\",\"type\":\"uint256\"}],\"name\":\"MaxBetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"POLAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"POLFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prediction\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RaceEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"name\":\"RaceStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"RevenueAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RevenueFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"RewarderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prediction\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTotal\",\"type\":\"uint256\"}],\"name\":\"Wagered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"betsOnRace\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"place\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"internalType\":\"struct Exotic.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betsPerRace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"endRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomProviderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jackpotContribution\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jackpotAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRaceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"result\",\"type\":\"uint256[]\"}],\"name\":\"odds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"prediction\",\"type\":\"uint256[]\"}],\"name\":\"placeBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"race\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWagered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"raceResult\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomProvider\",\"outputs\":[{\"internalType\":\"contract IRandomProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"}],\"name\":\"startRace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"updateMaxBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"updatePOLAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updatePOLFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"updateRevenueAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateRevenueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"updateRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"userBet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"raceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"place\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"internalType\":\"struct Exotic.Bet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"An betting game with exotic bet types\",\"version\":1},\"userdoc\":{\"events\":{\"Payout(uint256,address,uint256,uint256[],uint256)\":{\"notice\":\"emitted when a bet is cashed out.\"},\"RaceEnd(uint256,uint256,uint256)\":{\"notice\":\"emitted when a race ends.\"},\"RaceStart(uint256,uint256)\":{\"notice\":\"emitted when a race starts.\"},\"Wagered(uint256,address,uint256,uint256[],uint256)\":{\"notice\":\"emitted when a new bet is placed on a race.\"}},\"kind\":\"user\",\"methods\":{\"bet(address,uint256)\":{\"notice\":\"mapping of address to list of bets.\"},\"endRace(uint256,uint256[])\":{\"notice\":\"End the race and set the result.\"},\"fee()\":{\"notice\":\"Fee paramaters.\"},\"frequency()\":{\"notice\":\"How often races take place.\"},\"nextRaceId()\":{\"notice\":\"The time of the next race to take place.\"},\"odds(uint256,uint256[])\":{\"notice\":\"Get the current odds for a prediction.\"},\"payout(uint256)\":{\"notice\":\"Cash out a winning bet.\"},\"placeBet(uint256,uint256[])\":{\"notice\":\"Place a bet.\"},\"race(uint256)\":{\"notice\":\"The state for each race.\"},\"raceResult(uint256)\":{\"notice\":\"Return the results for a race.\"},\"start()\":{\"notice\":\"The datetime of the first race.\"},\"startRace(uint256)\":{\"notice\":\"Start the race and request result from VRF.\"},\"userBet(address,uint256)\":{\"notice\":\"Returns a users bet with given id.\"},\"userBetCount(address)\":{\"notice\":\"Return the amount of bets a user has made.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exotic.sol\":\"Exotic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Exotic.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IRandomProvider.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\n\\n\\n/// @title An betting game with exotic bet types\\ncontract Exotic is Initializable, OwnableUpgradeable {\\n\\n    IRandomProvider public randomProvider;\\n\\n    uint256 private balance;\\n\\n    /// @notice How often races take place.\\n    uint256 public constant frequency = 3 minutes;\\n\\n    /// @notice The datetime of the first race.\\n    uint256 public start;\\n\\n    /// @notice Fee paramaters.\\n    uint256 public fee;  // House take in bps\\n    uint256 public jackpotContribution;  // Jackpot contribution in bps\\n    address public feeAddress;\\n    address public jackpotAddress;\\n\\n    uint256 public maxBet;\\n\\n    IRewarder public rewarder;\\n\\n    struct Bet {\\n        uint256 raceId;\\n        uint256 amount;\\n        address account;\\n        uint256[] place;\\n        bool paid;\\n    }\\n\\n    struct Race {\\n        uint256 totalWagered;\\n        uint256 paid;\\n        uint256 result;\\n        uint256 requestId;\\n        uint256[6] winWeights;\\n    }\\n\\n    /// @notice The state for each race.\\n    mapping(uint256 => Race) public race;\\n    /// @notice mapping of address to list of bets.\\n    mapping(address => Bet[]) public bet;\\n    /// @notice used internally to map races to VRF requests.\\n    mapping(uint256 => uint256) private requestIdRace;\\n\\n    mapping(uint256 => mapping(address => uint256[])) public betsPerRace;\\n\\n    /// @notice emitted when a new bet is placed on a race.\\n    event Wagered(\\n        uint256 indexed raceId,\\n        address indexed from,\\n        uint256 amount,\\n        uint256[] prediction,\\n        uint256 poolTotal\\n    );\\n\\n    /// @notice emitted when a bet is cashed out.\\n    event Payout(\\n        uint256 indexed raceId,\\n        address indexed to,\\n        uint256 amount,\\n        uint256[] prediction,\\n        uint256 payout\\n    );\\n\\n    /// @notice emitted when a race starts.\\n    event RaceStart(\\n        uint256 indexed raceId,\\n        uint256 totalValue\\n    );\\n    /// @notice emitted when a race ends.\\n    event RaceEnd(\\n        uint256 indexed raceId,\\n        uint256 totalValue,\\n        uint256 result\\n    );\\n\\n    event MaxBetUpdated(uint256 maxBet);\\n    event RevenueAddressUpdated(address indexed feeAddress);\\n    event RevenueFeeUpdated(uint256 fee);\\n    event POLAddressUpdated(address indexed feeAddress);\\n    event POLFeeUpdated(uint256 fee);\\n    event RewarderUpdated(address indexed rewarder);\\n\\n    function initialize(\\n        address _randomProviderAddress,\\n        uint256 _fee,\\n        uint256 _jackpotContribution,\\n        address _feeAddress,\\n        address _jackpotAddress,\\n        uint256 _maxBet\\n    ) public initializer {\\n        start = block.timestamp;\\n        randomProvider = IRandomProvider(_randomProviderAddress);\\n        fee = _fee;\\n        jackpotContribution = _jackpotContribution;\\n        feeAddress = _feeAddress;\\n        jackpotAddress = _jackpotAddress;\\n        maxBet = _maxBet;\\n        __Ownable_init();\\n    }\\n\\n    function updateRewarder(IRewarder _rewarder) external onlyOwner {\\n        rewarder = _rewarder;\\n        emit RewarderUpdated(address(_rewarder));\\n    }\\n\\n    function updateMaxBet(uint256 _maxBet) external onlyOwner {\\n        maxBet = _maxBet;\\n        emit MaxBetUpdated(maxBet);\\n    }\\n\\n    function updateRevenueFee(uint256 _fee) external onlyOwner {\\n        fee = _fee;\\n        emit RevenueFeeUpdated(_fee);\\n    }\\n\\n    function updateRevenueAddress(address _feeAddress) external onlyOwner {\\n        require(_feeAddress != address(0), \\\"Fee address can't be 0\\\");\\n        feeAddress = _feeAddress;\\n        emit RevenueAddressUpdated(_feeAddress);\\n    }\\n\\n    function updatePOLFee(uint256 _fee) external onlyOwner {\\n        jackpotContribution = _fee;\\n        emit POLFeeUpdated(_fee);\\n    }\\n\\n    function updatePOLAddress(address _feeAddress) external onlyOwner {\\n        require(_feeAddress != address(0), \\\"Fee address can't be 0\\\");\\n        jackpotAddress = _feeAddress;\\n        emit POLAddressUpdated(_feeAddress);\\n    }\\n\\n    /// @notice Return the amount of bets a user has made.\\n    function userBetCount(address user) public view returns (uint256) {\\n        return bet[user].length;\\n    }\\n\\n    /// @notice Returns a users bet with given id.\\n    function userBet(\\n        address user, uint256 betId\\n    ) external view returns (\\n        Bet memory\\n    ) {\\n        return bet[user][betId];\\n    }\\n\\n\\t/// @notice The time of the next race to take place.\\n\\tfunction nextRaceId() external view returns (uint256) {\\n\\t\\treturn block.timestamp + (frequency - (block.timestamp % frequency));\\n\\t}\\n\\n    /// @notice Get the current odds for a prediction.\\n    function odds(uint256 raceId, uint256[] memory result) public view returns (uint256) {\\n        Race memory _race = race[raceId];\\n        require(result.length == 1, \\\"Only win bet currently supported\\\");\\n        uint256 total;\\n        uint256 i;\\n        for (i = 0; i < 6; i++) {\\n            total += _race.winWeights[i];\\n        }\\n        if (total == 0) return total;\\n        return (_race.winWeights[result[0]] * 1e10) / total;\\n    }\\n\\n    /// @notice Start the race and request result from VRF.\\n    function startRace(uint256 raceId) public {\\n        validateRaceID(raceId);\\n        require(block.timestamp > raceId, \\\"Race not finished\\\");\\n        Race storage _race = race[raceId];\\n        require(_race.requestId == 0, \\\"Result already requested\\\");\\n        require(_race.result == 0, \\\"Race result already fulfilled\\\");\\n\\t \\tuint256 s_requestId = randomProvider.requestRandomWords();\\n        _race.requestId = s_requestId;\\n        requestIdRace[s_requestId] = raceId;\\n        emit RaceStart(\\n            raceId,\\n            balance\\n        );\\n    }\\n\\n    /// @notice Place a bet.\\n    function placeBet(\\n        uint256 raceId,\\n        uint256[] calldata prediction\\n    ) external payable returns (uint256 betId) {\\n        validateRaceID(raceId);\\n        require(prediction.length == 1, \\\"Only win bet currently supported\\\");\\n\\n        uint256 betFee = msg.value * fee / 10000;\\n        uint256 jackpotFee = msg.value * jackpotContribution / 10000;\\n        uint256 betValue = msg.value - (betFee + jackpotFee);\\n\\n        require(betValue <= maxBet, \\\"Bet above maxBet limit\\\");\\n\\n        // Create the bet.\\n        Bet memory _bet;\\n        _bet.raceId = raceId;\\n        _bet.amount = betValue;\\n        _bet.account = msg.sender;\\n        bet[msg.sender].push(_bet);\\n        bet[msg.sender][bet[msg.sender].length - 1].place.push(prediction[0]);\\n\\n        // Update the race.\\n        Race storage _race = race[raceId];\\n        _race.winWeights[prediction[0]] += betValue;\\n        _race.totalWagered += betValue;\\n\\n        // Internal accounting.\\n        balance += betValue;\\n        emit Wagered(\\n            raceId,\\n            msg.sender,\\n            betValue,\\n            prediction,\\n            balance\\n        );\\n\\n        if (raceId < block.timestamp) {\\n            startRace(raceId);\\n        }\\n        if (address(rewarder) != address(0)) {\\n            rewarder.addReward(msg.sender, msg.value);\\n        }\\n        payable(feeAddress).transfer(betFee);\\n        payable(jackpotAddress).transfer(jackpotFee);\\n        betsPerRace[raceId][msg.sender].push(bet[msg.sender].length - 1);\\n        return bet[msg.sender].length - 1;\\n    }\\n\\n    function betsOnRace(address user, uint256 raceId) external view returns (Bet[] memory) {\\n        uint256[] memory betIds = betsPerRace[raceId][user];\\n        uint256 i;\\n        Bet[] memory result = new Bet[](betIds.length);\\n        for (i = 0; i < betIds.length; i++){\\n            result[i] = bet[user][betIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Cash out a winning bet.\\n    function payout(uint256 betId) external {\\n        Bet storage _bet = bet[msg.sender][betId];\\n        Race storage _race = race[_bet.raceId];\\n        require(_race.result != 0, \\\"Race not finished\\\");\\n        require(!_bet.paid, \\\"Bet already paid\\\");\\n\\n        uint256[6] memory result = raceResult(_bet.raceId);\\n        uint256 i;\\n        for (i = 0; i < _bet.place.length; i++) {\\n            if (_bet.place[i] != result[i]) {\\n                return;\\n            }\\n        }\\n        uint256 _odds = odds(_bet.raceId, _bet.place);\\n        uint256 _payout = (_bet.amount * 1e10) / _odds;\\n        _bet.paid = true;\\n        _race.paid += _payout;\\n        balance -= _payout;\\n        emit Payout(\\n            _bet.raceId,\\n            msg.sender,\\n            _bet.amount,\\n            _bet.place,\\n            _payout\\n        );\\n        payable(msg.sender).transfer(_payout);\\n    }\\n\\n    /// @notice End the race and set the result.\\n    function endRace(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) external {\\n        require(msg.sender == address(randomProvider), \\\"Not Allowed randomProvider\\\");\\n        uint256 raceId = requestIdRace[requestId];\\n        Race storage _race = race[raceId];\\n        require(_race.result == 0, \\\"Randomness already fulfilled\\\");\\n        _race.result = randomWords[0];\\n        emit RaceEnd(\\n            raceId,\\n            balance,\\n            randomWords[0]\\n        );\\n    }\\n\\n    /// @notice Validate a `raceId` is valid to make a bet on.\\n    function validateRaceID(uint256 raceId) internal view {\\n        // Need to validate race length isn't finished\\n        require(raceId % frequency == 0, \\\"Invalid race ID\\\");\\n        require(raceId >= start, \\\"Living in the past bro\\\");\\n        require(race[raceId].result == 0, \\\"Race finished\\\");\\n        require(requestIdRace[raceId] == 0, \\\"Race finising\\\");\\n    }\\n\\n    /// @notice Return the results for a race.\\n    function raceResult(uint256 raceId) public view returns (uint256[6] memory) {\\n        Race memory _race = race[raceId];\\n        require(_race.result != 0, \\\"Race is not finished\\\");\\n\\n        uint256 i;\\n\\n        // Hack add 1 to each weight to ensure stuff, ok\\n        uint256[6] memory weights = _race.winWeights;\\n        for (i = 0; i < 6; i++) {\\n            weights[i] += 1;\\n        }\\n\\n        uint256 total;\\n        for (i = 0; i < 6; i++) {\\n            total += _race.winWeights[i];\\n        }\\n\\n        uint256[6] memory result;\\n        uint256 j;\\n        uint256 number;\\n\\n        for (i = 0; i < 6; i++) {\\n            if (total == 0) {\\n                number = 0;\\n            } else {\\n                number = _race.result % total;\\n            }\\n            for (j = 0; j < 6; j++) {\\n                if (weights[j] > number) {\\n                    total -= weights[j];\\n                    weights[j] = 0;\\n                    result[i] = j;\\n                    break;\\n                } else {\\n                    number -= weights[j];\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb717aea5a83f73a0f08ef83cd8537323d42a7b8eb215be3d7a1e10bbf142e1d9\",\"license\":\"Unlicense\"},\"contracts/interfaces/IRandomProvider.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IRandomProvider {\\n    function requestRandomWords() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x08ada06772773d82e709658d67470e4519bd9496b34307b05788836070bd97b0\",\"license\":\"Unlicense\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n\\ninterface IRewarder{\\n    function claim() external;\\n    function claimable(address userId) external view returns (uint256);\\n    function addReward(address userId, uint256 betAmount) external;\\n}\\n\",\"keccak256\":\"0x9598d71b7d685dbd1f08df726d941386d8ae818de006538fe5ffa1a1e600b94d\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506144d3806100206000396000f3fe6080604052600436106101e35760003560e01c8063b71455ee11610102578063dcc3e06e11610095578063f2fde38b11610064578063f2fde38b146106ea578063f408a23a14610713578063f846cabc14610750578063fdd2885914610790576101e3565b8063dcc3e06e14610640578063ddca3f431461066b578063e115234314610696578063ead50da3146106bf576101e3565b8063d3c4771b116100d1578063d3c4771b14610584578063d613b60d146105c1578063d8595d86146105ea578063d9b8fd8f14610615576101e3565b8063b71455ee1461049f578063b7dda85e146104dc578063be9a65551461051c578063d149221b14610547576101e3565b80636bc0b3ba1161017a57806397d147141161014957806397d14714146103fb578063a55cd51c14610424578063a655f29e1461044d578063af3645c414610476576101e3565b80636bc0b3ba14610363578063715018a61461038e5780638da5cb5b146103a55780638f46500e146103d0576101e3565b806330d14655116101b657806330d14655146102a2578063315aa38c146102d257806341275358146102fb5780634195ab8e14610326576101e3565b8063122d2d96146101e857806324d822bf146102115780632c48e8cd1461023a5780632e5b216814610277575b600080fd5b3480156101f457600080fd5b5061020f600480360381019061020a9190612f63565b6107b9565b005b34801561021d57600080fd5b506102386004803603810190610233919061301d565b610932565b005b34801561024657600080fd5b50610261600480360381019061025c9190613077565b610b28565b60405161026e9190613aba565b60405180910390f35b34801561028357600080fd5b5061028c610b66565b6040516102999190613aba565b60405180910390f35b6102bc60048036038101906102b791906130ca565b610b6c565b6040516102c99190613aba565b60405180910390f35b3480156102de57600080fd5b506102f960048036038101906102f4919061312a565b611279565b005b34801561030757600080fd5b50610310611400565b60405161031d9190613786565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190612f23565b611426565b60405161035a9190613a98565b60405180910390f35b34801561036f57600080fd5b5061037861157d565b6040516103859190613786565b60405180910390f35b34801561039a57600080fd5b506103a36115a3565b005b3480156103b157600080fd5b506103ba61162b565b6040516103c79190613786565b60405180910390f35b3480156103dc57600080fd5b506103e5611655565b6040516103f29190613807565b60405180910390f35b34801561040757600080fd5b50610422600480360381019061041d9190612ff0565b61167b565b005b34801561043057600080fd5b5061044b6004803603810190610446919061301d565b61177e565b005b34801561045957600080fd5b50610474600480360381019061046f919061301d565b61183d565b005b34801561048257600080fd5b5061049d60048036038101906104989190612ef6565b6118fa565b005b3480156104ab57600080fd5b506104c660048036038101906104c1919061301d565b611a6d565b6040516104d391906137ec565b60405180910390f35b3480156104e857600080fd5b5061050360048036038101906104fe919061301d565b611d19565b6040516105139493929190613bc1565b60405180910390f35b34801561052857600080fd5b50610531611d49565b60405161053e9190613aba565b60405180910390f35b34801561055357600080fd5b5061056e6004803603810190610569919061312a565b611d4f565b60405161057b9190613aba565b60405180910390f35b34801561059057600080fd5b506105ab60048036038101906105a69190612f23565b611ee2565b6040516105b891906137ca565b60405180910390f35b3480156105cd57600080fd5b506105e860048036038101906105e3919061301d565b61218d565b005b3480156105f657600080fd5b506105ff61224a565b60405161060c9190613aba565b60405180910390f35b34801561062157600080fd5b5061062a612250565b6040516106379190613aba565b60405180910390f35b34801561064c57600080fd5b5061065561227b565b6040516106629190613822565b60405180910390f35b34801561067757600080fd5b506106806122a1565b60405161068d9190613aba565b60405180910390f35b3480156106a257600080fd5b506106bd60048036038101906106b8919061301d565b6122a7565b005b3480156106cb57600080fd5b506106d46125c4565b6040516106e19190613aba565b60405180910390f35b3480156106f657600080fd5b50610711600480360381019061070c9190612ef6565b6125c9565b005b34801561071f57600080fd5b5061073a60048036038101906107359190612ef6565b6126c1565b6040516107479190613aba565b60405180910390f35b34801561075c57600080fd5b5061077760048036038101906107729190612f23565b61270d565b6040516107879493929190613b7c565b60405180910390f35b34801561079c57600080fd5b506107b760048036038101906107b29190612ef6565b612787565b005b60006107c560016128fa565b905080156107e9576001600060016101000a81548160ff0219169083151502179055505b4260678190555086606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856068819055508460698190555083606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606c819055506108d06129ea565b80156109295760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610920919061383d565b60405180910390a15b50505050505050565b61093b81612a43565b80421161097d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097490613978565b60405180910390fd5b6000606e6000838152602001908152602001600020905060008160030154146109db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d2906139b8565b60405180910390fd5b6000816002015414610a22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1990613a18565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0c862896040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a8e57600080fd5b505af1158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac6919061304a565b9050808260030181905550826070600083815260200190815260200160002081905550827f727aed3ef5e1b948e78407c8b942fb3193ebc5901b4bc951faa6568c90b78495606654604051610b1b9190613aba565b60405180910390a2505050565b60716020528260005260406000206020528160005260406000208181548110610b5057600080fd5b9060005260206000200160009250925050505481565b606c5481565b6000610b7784612a43565b60018383905014610bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb490613918565b60405180910390fd5b600061271060685434610bd09190613dcc565b610bda9190613d9b565b9050600061271060695434610bef9190613dcc565b610bf99190613d9b565b905060008183610c099190613d45565b34610c149190613e26565b9050606c54811115610c5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5290613878565b60405180910390fd5b610c63612cdb565b878160000181815250508181602001818152505033816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000209060050201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190610d8f929190612d22565b5060808201518160040160006101000a81548160ff0219169083151502179055505050606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050610e409190613e26565b81548110610e5157610e50614057565b5b906000526020600020906005020160030187876000818110610e7657610e75614057565b5b9050602002013590806001815401808255809150506001900390600052602060002001600090919091909150556000606e60008a81526020019081526020016000209050828160040189896000818110610ed357610ed2614057565b5b9050602002013560068110610eeb57610eea614057565b5b016000828254610efb9190613d45565b9250508190555082816000016000828254610f169190613d45565b925050819055508260666000828254610f2f9190613d45565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16897fed7146643be17948fcb4400f9980c37ef3404baf91823ef51782e2c6673266f6858b8b606654604051610f859493929190613ad5565b60405180910390a342891015610f9f57610f9e89610932565b5b600073ffffffffffffffffffffffffffffffffffffffff16606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461108557606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639feb8f5033346040518363ffffffff1660e01b81526004016110529291906137a1565b600060405180830381600087803b15801561106c57600080fd5b505af1158015611080573d6000803e3d6000fd5b505050505b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f193505050501580156110ed573d6000803e3d6000fd5b50606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015611156573d6000803e3d6000fd5b50607160008a815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506111f69190613e26565b90806001815401808255809150506001900390600052602060002001600090919091909150556001606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061126b9190613e26565b955050505050509392505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611309576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611300906138b8565b60405180910390fd5b6000607060008481526020019081526020016000205490506000606e60008381526020019081526020016000209050600081600201541461137f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137690613858565b60405180910390fd5b8260008151811061139357611392614057565b5b60200260200101518160020181905550817f7554ff21c11af92d9ed24a3625daa96a85ebe3a0a3c44c44cb080cb400c42d98606654856000815181106113dc576113db614057565b5b60200260200101516040516113f2929190613b53565b60405180910390a250505050565b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61142e612cdb565b606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061147f5761147e614057565b5b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561155157602002820191906000526020600020905b81548152602001906001019080831161153d575b505050505081526020016004820160009054906101000a900460ff161515151581525050905092915050565b606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6115ab612b89565b73ffffffffffffffffffffffffffffffffffffffff166115c961162b565b73ffffffffffffffffffffffffffffffffffffffff161461161f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161690613998565b60405180910390fd5b6116296000612b91565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611683612b89565b73ffffffffffffffffffffffffffffffffffffffff166116a161162b565b73ffffffffffffffffffffffffffffffffffffffff16146116f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ee90613998565b60405180910390fd5b80606d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f47c9042c3be42a955f60f9b75006522826af1a3bed83e26646997d3bcccda77c60405160405180910390a250565b611786612b89565b73ffffffffffffffffffffffffffffffffffffffff166117a461162b565b73ffffffffffffffffffffffffffffffffffffffff16146117fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f190613998565b60405180910390fd5b80606c819055507f2b47c83dfa951a422411b397c029d005c87d9fa8fe9f6d2bc2620c23e5e00312606c546040516118329190613aba565b60405180910390a150565b611845612b89565b73ffffffffffffffffffffffffffffffffffffffff1661186361162b565b73ffffffffffffffffffffffffffffffffffffffff16146118b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b090613998565b60405180910390fd5b806068819055507f14a368a696aca40efd280b31b2896f421c8a75eb772f8de1731eb220735395c6816040516118ef9190613aba565b60405180910390a150565b611902612b89565b73ffffffffffffffffffffffffffffffffffffffff1661192061162b565b73ffffffffffffffffffffffffffffffffffffffff1614611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196d90613998565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dd906138f8565b60405180910390fd5b80606b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f5dc8a57b462a8fae72fded55639269f100cfd12e046986a8ef490d56d5edcbf760405160405180910390a250565b611a75612d6f565b6000606e60008481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201600680602002604051908101604052809291908260068015611af9576020028201915b815481526020019060010190808311611ae5575b5050505050815250509050600081604001511415611b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4390613a58565b60405180910390fd5b60008082608001519050600091505b6006821015611ba4576001818360068110611b7957611b78614057565b5b60200201818151611b8a9190613d45565b915081815250508180611b9c90613f7f565b925050611b5b565b60008092505b6006831015611bef5783608001518360068110611bca57611bc9614057565b5b602002015181611bda9190613d45565b90508280611be790613f7f565b935050611baa565b611bf7612d6f565b600080600095505b6006861015611d0a576000841415611c1a5760009050611c2d565b838760400151611c2a9190613fc8565b90505b600091505b6006821015611cf75780858360068110611c4f57611c4e614057565b5b60200201511115611cbf57848260068110611c6d57611c6c614057565b5b602002015184611c7d9190613e26565b93506000858360068110611c9457611c93614057565b5b60200201818152505081838760068110611cb157611cb0614057565b5b602002018181525050611cf7565b848260068110611cd257611cd1614057565b5b602002015181611ce29190613e26565b90508180611cef90613f7f565b925050611c32565b8580611d0290613f7f565b965050611bff565b82975050505050505050919050565b606e6020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60675481565b600080606e60008581526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201600680602002604051908101604052809291908260068015611dd4576020028201915b815481526020019060010190808311611dc0575b50505050508152505090506001835114611e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1a90613918565b60405180910390fd5b600080600090505b6006811015611e705782608001518160068110611e4b57611e4a614057565b5b602002015182611e5b9190613d45565b91508080611e6890613f7f565b915050611e2b565b6000821415611e8457819350505050611edc565b816402540be400846080015187600081518110611ea457611ea3614057565b5b602002602001015160068110611ebd57611ebc614057565b5b6020020151611ecc9190613dcc565b611ed69190613d9b565b93505050505b92915050565b606060006071600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611f8057602002820191906000526020600020905b815481526020019060010190808311611f6c575b50505050509050600080825167ffffffffffffffff811115611fa557611fa4614086565b5b604051908082528060200260200182016040528015611fde57816020015b611fcb612cdb565b815260200190600190039081611fc35790505b509050600091505b825182101561218157606f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083838151811061204157612040614057565b5b60200260200101518154811061205a57612059614057565b5b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561212c57602002820191906000526020600020905b815481526020019060010190808311612118575b505050505081526020016004820160009054906101000a900460ff16151515158152505081838151811061216357612162614057565b5b6020026020010181905250818061217990613f7f565b925050611fe6565b80935050505092915050565b612195612b89565b73ffffffffffffffffffffffffffffffffffffffff166121b361162b565b73ffffffffffffffffffffffffffffffffffffffff1614612209576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220090613998565b60405180910390fd5b806069819055507f9afc1b03107862b2aabd5adaf9bf3a6c054623803995901416d64d2ac86ed01d8160405161223f9190613aba565b60405180910390a150565b60695481565b600060b44261225f9190613fc8565b60b461226b9190613e26565b426122769190613d45565b905090565b606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60685481565b6000606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106122fa576122f9614057565b5b906000526020600020906005020190506000606e600083600001548152602001908152602001600020905060008160020154141561236d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236490613978565b60405180910390fd5b8160040160009054906101000a900460ff16156123bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b690613a78565b60405180910390fd5b60006123ce8360000154611a6d565b905060005b836003018054905081101561243c578181600681106123f5576123f4614057565b5b60200201518460030182815481106124105761240f614057565b5b90600052602060002001541461242957505050506125c1565b808061243490613f7f565b9150506123d3565b600061249e85600001548660030180548060200260200160405190810160405280929190818152602001828054801561249457602002820191906000526020600020905b815481526020019060010190808311612480575b5050505050611d4f565b90506000816402540be40087600101546124b89190613dcc565b6124c29190613d9b565b905060018660040160006101000a81548160ff021916908315150217905550808560010160008282546124f59190613d45565b92505081905550806066600082825461250e9190613e26565b925050819055503373ffffffffffffffffffffffffffffffffffffffff1686600001547fef0068ac9e6ad3b19d182459af297eb4d144e7721b87c619278bed0fcd0bd5dc8860010154896003018560405161256b93929190613b15565b60405180910390a33373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156125b9573d6000803e3d6000fd5b505050505050505b50565b60b481565b6125d1612b89565b73ffffffffffffffffffffffffffffffffffffffff166125ef61162b565b73ffffffffffffffffffffffffffffffffffffffff1614612645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263c90613998565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ac90613898565b60405180910390fd5b6126be81612b91565b50565b6000606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b606f602052816000526040600020818154811061272957600080fd5b9060005260206000209060050201600091509150508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900460ff16905084565b61278f612b89565b73ffffffffffffffffffffffffffffffffffffffff166127ad61162b565b73ffffffffffffffffffffffffffffffffffffffff1614612803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fa90613998565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286a906138f8565b60405180910390fd5b80606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f12c87c4c1bec313f335ef0060b241de51ec549e8c57a25aae98da2ad10837cde60405160405180910390a250565b60008060019054906101000a900460ff16156129715760018260ff16148015612929575061292730612c57565b155b612968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295f90613958565b60405180910390fd5b600090506129e5565b8160ff1660008054906101000a900460ff1660ff16106129c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bd90613958565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff16612a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3090613a38565b60405180910390fd5b612a41612c7a565b565b600060b482612a529190613fc8565b14612a92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a89906139f8565b60405180910390fd5b606754811015612ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ace906138d8565b60405180910390fd5b6000606e60008381526020019081526020016000206002015414612b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b27906139d8565b60405180910390fd5b6000607060008381526020019081526020016000205414612b86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7d90613938565b60405180910390fd5b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612cc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc090613a38565b60405180910390fd5b612cd9612cd4612b89565b612b91565b565b6040518060a001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581525090565b828054828255906000526020600020908101928215612d5e579160200282015b82811115612d5d578251825591602001919060010190612d42565b5b509050612d6b9190612d91565b5090565b6040518060c00160405280600690602082028036833780820191505090505090565b5b80821115612daa576000816000905550600101612d92565b5090565b6000612dc1612dbc84613c2b565b613c06565b90508083825260208201905082856020860282011115612de457612de36140d2565b5b60005b85811015612e145781612dfa8882612ecc565b845260208401935060208301925050600181019050612de7565b5050509392505050565b600081359050612e2d81614458565b92915050565b60008083601f840112612e4957612e486140cd565b5b8235905067ffffffffffffffff811115612e6657612e656140c8565b5b602083019150836020820283011115612e8257612e816140d2565b5b9250929050565b600082601f830112612e9e57612e9d6140cd565b5b8135612eae848260208601612dae565b91505092915050565b600081359050612ec68161446f565b92915050565b600081359050612edb81614486565b92915050565b600081519050612ef081614486565b92915050565b600060208284031215612f0c57612f0b6140e1565b5b6000612f1a84828501612e1e565b91505092915050565b60008060408385031215612f3a57612f396140e1565b5b6000612f4885828601612e1e565b9250506020612f5985828601612ecc565b9150509250929050565b60008060008060008060c08789031215612f8057612f7f6140e1565b5b6000612f8e89828a01612e1e565b9650506020612f9f89828a01612ecc565b9550506040612fb089828a01612ecc565b9450506060612fc189828a01612e1e565b9350506080612fd289828a01612e1e565b92505060a0612fe389828a01612ecc565b9150509295509295509295565b600060208284031215613006576130056140e1565b5b600061301484828501612eb7565b91505092915050565b600060208284031215613033576130326140e1565b5b600061304184828501612ecc565b91505092915050565b6000602082840312156130605761305f6140e1565b5b600061306e84828501612ee1565b91505092915050565b6000806000606084860312156130905761308f6140e1565b5b600061309e86828701612ecc565b93505060206130af86828701612e1e565b92505060406130c086828701612ecc565b9150509250925092565b6000806000604084860312156130e3576130e26140e1565b5b60006130f186828701612ecc565b935050602084013567ffffffffffffffff811115613112576131116140d7565b5b61311e86828701612e33565b92509250509250925092565b60008060408385031215613141576131406140e1565b5b600061314f85828601612ecc565b925050602083013567ffffffffffffffff8111156131705761316f6140d7565b5b61317c85828601612e89565b9150509250929050565b6000613192838361367c565b905092915050565b60006131a68383613768565b60208301905092915050565b6131bb81613e64565b82525050565b6131ca81613e64565b82525050565b60006131db82613c96565b6131e58185613cf6565b9350836020820285016131f785613c57565b8060005b8581101561323357848403895281516132148582613186565b945061321f83613cc2565b925060208a019950506001810190506131fb565b50829750879550505050505092915050565b61324e81613ca1565b6132588184613d07565b925061326382613c67565b8060005b8381101561329457815161327b878261319a565b965061328683613ccf565b925050600181019050613267565b505050505050565b60006132a88385613d23565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156132db576132da6140dc565b5b6020830292506132ec838584613f25565b82840190509392505050565b600061330382613cac565b61330d8185613d12565b935061331883613c71565b8060005b83811015613349578151613330888261319a565b975061333b83613cdc565b92505060018101905061331c565b5085935050505092915050565b600061336182613cb7565b61336b8185613d23565b935061337683613c81565b8060005b838110156133ae5761338b826140b5565b613395888261319a565b97506133a083613ce9565b92505060018101905061337a565b5085935050505092915050565b6133c481613e76565b82525050565b6133d381613e76565b82525050565b6133e281613ecb565b82525050565b6133f181613edd565b82525050565b61340081613eef565b82525050565b6000613413601c83613d34565b915061341e82614104565b602082019050919050565b6000613436601683613d34565b91506134418261412d565b602082019050919050565b6000613459602683613d34565b915061346482614156565b604082019050919050565b600061347c601a83613d34565b9150613487826141a5565b602082019050919050565b600061349f601683613d34565b91506134aa826141ce565b602082019050919050565b60006134c2601683613d34565b91506134cd826141f7565b602082019050919050565b60006134e5602083613d34565b91506134f082614220565b602082019050919050565b6000613508600d83613d34565b915061351382614249565b602082019050919050565b600061352b602e83613d34565b915061353682614272565b604082019050919050565b600061354e601183613d34565b9150613559826142c1565b602082019050919050565b6000613571602083613d34565b915061357c826142ea565b602082019050919050565b6000613594601883613d34565b915061359f82614313565b602082019050919050565b60006135b7600d83613d34565b91506135c28261433c565b602082019050919050565b60006135da600f83613d34565b91506135e582614365565b602082019050919050565b60006135fd601d83613d34565b91506136088261438e565b602082019050919050565b6000613620602b83613d34565b915061362b826143b7565b604082019050919050565b6000613643601483613d34565b915061364e82614406565b602082019050919050565b6000613666601083613d34565b91506136718261442f565b602082019050919050565b600060a0830160008301516136946000860182613768565b5060208301516136a76020860182613768565b5060408301516136ba60408601826131b2565b50606083015184820360608601526136d282826132f8565b91505060808301516136e760808601826133bb565b508091505092915050565b600060a08301600083015161370a6000860182613768565b50602083015161371d6020860182613768565b50604083015161373060408601826131b2565b506060830151848203606086015261374882826132f8565b915050608083015161375d60808601826133bb565b508091505092915050565b61377181613eb4565b82525050565b61378081613eb4565b82525050565b600060208201905061379b60008301846131c1565b92915050565b60006040820190506137b660008301856131c1565b6137c36020830184613777565b9392505050565b600060208201905081810360008301526137e481846131d0565b905092915050565b600060c0820190506138016000830184613245565b92915050565b600060208201905061381c60008301846133d9565b92915050565b600060208201905061383760008301846133e8565b92915050565b600060208201905061385260008301846133f7565b92915050565b6000602082019050818103600083015261387181613406565b9050919050565b6000602082019050818103600083015261389181613429565b9050919050565b600060208201905081810360008301526138b18161344c565b9050919050565b600060208201905081810360008301526138d18161346f565b9050919050565b600060208201905081810360008301526138f181613492565b9050919050565b60006020820190508181036000830152613911816134b5565b9050919050565b60006020820190508181036000830152613931816134d8565b9050919050565b60006020820190508181036000830152613951816134fb565b9050919050565b600060208201905081810360008301526139718161351e565b9050919050565b6000602082019050818103600083015261399181613541565b9050919050565b600060208201905081810360008301526139b181613564565b9050919050565b600060208201905081810360008301526139d181613587565b9050919050565b600060208201905081810360008301526139f1816135aa565b9050919050565b60006020820190508181036000830152613a11816135cd565b9050919050565b60006020820190508181036000830152613a31816135f0565b9050919050565b60006020820190508181036000830152613a5181613613565b9050919050565b60006020820190508181036000830152613a7181613636565b9050919050565b60006020820190508181036000830152613a9181613659565b9050919050565b60006020820190508181036000830152613ab281846136f2565b905092915050565b6000602082019050613acf6000830184613777565b92915050565b6000606082019050613aea6000830187613777565b8181036020830152613afd81858761329c565b9050613b0c6040830184613777565b95945050505050565b6000606082019050613b2a6000830186613777565b8181036020830152613b3c8185613356565b9050613b4b6040830184613777565b949350505050565b6000604082019050613b686000830185613777565b613b756020830184613777565b9392505050565b6000608082019050613b916000830187613777565b613b9e6020830186613777565b613bab60408301856131c1565b613bb860608301846133ca565b95945050505050565b6000608082019050613bd66000830187613777565b613be36020830186613777565b613bf06040830185613777565b613bfd6060830184613777565b95945050505050565b6000613c10613c21565b9050613c1c8282613f4e565b919050565b6000604051905090565b600067ffffffffffffffff821115613c4657613c45614086565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600060069050919050565b600081519050919050565b600081549050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000600182019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613d5082613eb4565b9150613d5b83613eb4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d9057613d8f613ff9565b5b828201905092915050565b6000613da682613eb4565b9150613db183613eb4565b925082613dc157613dc0614028565b5b828204905092915050565b6000613dd782613eb4565b9150613de283613eb4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e1b57613e1a613ff9565b5b828202905092915050565b6000613e3182613eb4565b9150613e3c83613eb4565b925082821015613e4f57613e4e613ff9565b5b828203905092915050565b6000819050919050565b6000613e6f82613e94565b9050919050565b60008115159050919050565b6000613e8d82613e64565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613ed682613f01565b9050919050565b6000613ee882613f01565b9050919050565b6000613efa82613ebe565b9050919050565b6000613f0c82613f13565b9050919050565b6000613f1e82613e94565b9050919050565b82818337600083830152505050565b6000613f47613f42836140f7565b613e5a565b9050919050565b613f57826140e6565b810181811067ffffffffffffffff82111715613f7657613f75614086565b5b80604052505050565b6000613f8a82613eb4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fbd57613fbc613ff9565b5b600182019050919050565b6000613fd382613eb4565b9150613fde83613eb4565b925082613fee57613fed614028565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006140c18254613f34565b9050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b7f52616e646f6d6e65737320616c72656164792066756c66696c6c656400000000600082015250565b7f4265742061626f7665206d6178426574206c696d697400000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420416c6c6f7765642072616e646f6d50726f7669646572000000000000600082015250565b7f4c6976696e6720696e2074686520706173742062726f00000000000000000000600082015250565b7f46656520616464726573732063616e2774206265203000000000000000000000600082015250565b7f4f6e6c792077696e206265742063757272656e746c7920737570706f72746564600082015250565b7f526163652066696e6973696e6700000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f52616365206e6f742066696e6973686564000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f526573756c7420616c7265616479207265717565737465640000000000000000600082015250565b7f526163652066696e697368656400000000000000000000000000000000000000600082015250565b7f496e76616c696420726163652049440000000000000000000000000000000000600082015250565b7f5261636520726573756c7420616c72656164792066756c66696c6c6564000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f52616365206973206e6f742066696e6973686564000000000000000000000000600082015250565b7f42657420616c7265616479207061696400000000000000000000000000000000600082015250565b61446181613e64565b811461446c57600080fd5b50565b61447881613e82565b811461448357600080fd5b50565b61448f81613eb4565b811461449a57600080fd5b5056fea2646970667358221220401938621da2dc292ee2914dab93392289050709f8e11d819eaef01eb013b32f64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063b71455ee11610102578063dcc3e06e11610095578063f2fde38b11610064578063f2fde38b146106ea578063f408a23a14610713578063f846cabc14610750578063fdd2885914610790576101e3565b8063dcc3e06e14610640578063ddca3f431461066b578063e115234314610696578063ead50da3146106bf576101e3565b8063d3c4771b116100d1578063d3c4771b14610584578063d613b60d146105c1578063d8595d86146105ea578063d9b8fd8f14610615576101e3565b8063b71455ee1461049f578063b7dda85e146104dc578063be9a65551461051c578063d149221b14610547576101e3565b80636bc0b3ba1161017a57806397d147141161014957806397d14714146103fb578063a55cd51c14610424578063a655f29e1461044d578063af3645c414610476576101e3565b80636bc0b3ba14610363578063715018a61461038e5780638da5cb5b146103a55780638f46500e146103d0576101e3565b806330d14655116101b657806330d14655146102a2578063315aa38c146102d257806341275358146102fb5780634195ab8e14610326576101e3565b8063122d2d96146101e857806324d822bf146102115780632c48e8cd1461023a5780632e5b216814610277575b600080fd5b3480156101f457600080fd5b5061020f600480360381019061020a9190612f63565b6107b9565b005b34801561021d57600080fd5b506102386004803603810190610233919061301d565b610932565b005b34801561024657600080fd5b50610261600480360381019061025c9190613077565b610b28565b60405161026e9190613aba565b60405180910390f35b34801561028357600080fd5b5061028c610b66565b6040516102999190613aba565b60405180910390f35b6102bc60048036038101906102b791906130ca565b610b6c565b6040516102c99190613aba565b60405180910390f35b3480156102de57600080fd5b506102f960048036038101906102f4919061312a565b611279565b005b34801561030757600080fd5b50610310611400565b60405161031d9190613786565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190612f23565b611426565b60405161035a9190613a98565b60405180910390f35b34801561036f57600080fd5b5061037861157d565b6040516103859190613786565b60405180910390f35b34801561039a57600080fd5b506103a36115a3565b005b3480156103b157600080fd5b506103ba61162b565b6040516103c79190613786565b60405180910390f35b3480156103dc57600080fd5b506103e5611655565b6040516103f29190613807565b60405180910390f35b34801561040757600080fd5b50610422600480360381019061041d9190612ff0565b61167b565b005b34801561043057600080fd5b5061044b6004803603810190610446919061301d565b61177e565b005b34801561045957600080fd5b50610474600480360381019061046f919061301d565b61183d565b005b34801561048257600080fd5b5061049d60048036038101906104989190612ef6565b6118fa565b005b3480156104ab57600080fd5b506104c660048036038101906104c1919061301d565b611a6d565b6040516104d391906137ec565b60405180910390f35b3480156104e857600080fd5b5061050360048036038101906104fe919061301d565b611d19565b6040516105139493929190613bc1565b60405180910390f35b34801561052857600080fd5b50610531611d49565b60405161053e9190613aba565b60405180910390f35b34801561055357600080fd5b5061056e6004803603810190610569919061312a565b611d4f565b60405161057b9190613aba565b60405180910390f35b34801561059057600080fd5b506105ab60048036038101906105a69190612f23565b611ee2565b6040516105b891906137ca565b60405180910390f35b3480156105cd57600080fd5b506105e860048036038101906105e3919061301d565b61218d565b005b3480156105f657600080fd5b506105ff61224a565b60405161060c9190613aba565b60405180910390f35b34801561062157600080fd5b5061062a612250565b6040516106379190613aba565b60405180910390f35b34801561064c57600080fd5b5061065561227b565b6040516106629190613822565b60405180910390f35b34801561067757600080fd5b506106806122a1565b60405161068d9190613aba565b60405180910390f35b3480156106a257600080fd5b506106bd60048036038101906106b8919061301d565b6122a7565b005b3480156106cb57600080fd5b506106d46125c4565b6040516106e19190613aba565b60405180910390f35b3480156106f657600080fd5b50610711600480360381019061070c9190612ef6565b6125c9565b005b34801561071f57600080fd5b5061073a60048036038101906107359190612ef6565b6126c1565b6040516107479190613aba565b60405180910390f35b34801561075c57600080fd5b5061077760048036038101906107729190612f23565b61270d565b6040516107879493929190613b7c565b60405180910390f35b34801561079c57600080fd5b506107b760048036038101906107b29190612ef6565b612787565b005b60006107c560016128fa565b905080156107e9576001600060016101000a81548160ff0219169083151502179055505b4260678190555086606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856068819055508460698190555083606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606c819055506108d06129ea565b80156109295760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610920919061383d565b60405180910390a15b50505050505050565b61093b81612a43565b80421161097d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097490613978565b60405180910390fd5b6000606e6000838152602001908152602001600020905060008160030154146109db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d2906139b8565b60405180910390fd5b6000816002015414610a22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1990613a18565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0c862896040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a8e57600080fd5b505af1158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac6919061304a565b9050808260030181905550826070600083815260200190815260200160002081905550827f727aed3ef5e1b948e78407c8b942fb3193ebc5901b4bc951faa6568c90b78495606654604051610b1b9190613aba565b60405180910390a2505050565b60716020528260005260406000206020528160005260406000208181548110610b5057600080fd5b9060005260206000200160009250925050505481565b606c5481565b6000610b7784612a43565b60018383905014610bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb490613918565b60405180910390fd5b600061271060685434610bd09190613dcc565b610bda9190613d9b565b9050600061271060695434610bef9190613dcc565b610bf99190613d9b565b905060008183610c099190613d45565b34610c149190613e26565b9050606c54811115610c5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5290613878565b60405180910390fd5b610c63612cdb565b878160000181815250508181602001818152505033816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000209060050201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190610d8f929190612d22565b5060808201518160040160006101000a81548160ff0219169083151502179055505050606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050610e409190613e26565b81548110610e5157610e50614057565b5b906000526020600020906005020160030187876000818110610e7657610e75614057565b5b9050602002013590806001815401808255809150506001900390600052602060002001600090919091909150556000606e60008a81526020019081526020016000209050828160040189896000818110610ed357610ed2614057565b5b9050602002013560068110610eeb57610eea614057565b5b016000828254610efb9190613d45565b9250508190555082816000016000828254610f169190613d45565b925050819055508260666000828254610f2f9190613d45565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16897fed7146643be17948fcb4400f9980c37ef3404baf91823ef51782e2c6673266f6858b8b606654604051610f859493929190613ad5565b60405180910390a342891015610f9f57610f9e89610932565b5b600073ffffffffffffffffffffffffffffffffffffffff16606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461108557606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639feb8f5033346040518363ffffffff1660e01b81526004016110529291906137a1565b600060405180830381600087803b15801561106c57600080fd5b505af1158015611080573d6000803e3d6000fd5b505050505b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f193505050501580156110ed573d6000803e3d6000fd5b50606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f19350505050158015611156573d6000803e3d6000fd5b50607160008a815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506111f69190613e26565b90806001815401808255809150506001900390600052602060002001600090919091909150556001606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905061126b9190613e26565b955050505050509392505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611309576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611300906138b8565b60405180910390fd5b6000607060008481526020019081526020016000205490506000606e60008381526020019081526020016000209050600081600201541461137f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137690613858565b60405180910390fd5b8260008151811061139357611392614057565b5b60200260200101518160020181905550817f7554ff21c11af92d9ed24a3625daa96a85ebe3a0a3c44c44cb080cb400c42d98606654856000815181106113dc576113db614057565b5b60200260200101516040516113f2929190613b53565b60405180910390a250505050565b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61142e612cdb565b606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061147f5761147e614057565b5b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561155157602002820191906000526020600020905b81548152602001906001019080831161153d575b505050505081526020016004820160009054906101000a900460ff161515151581525050905092915050565b606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6115ab612b89565b73ffffffffffffffffffffffffffffffffffffffff166115c961162b565b73ffffffffffffffffffffffffffffffffffffffff161461161f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161690613998565b60405180910390fd5b6116296000612b91565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611683612b89565b73ffffffffffffffffffffffffffffffffffffffff166116a161162b565b73ffffffffffffffffffffffffffffffffffffffff16146116f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ee90613998565b60405180910390fd5b80606d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f47c9042c3be42a955f60f9b75006522826af1a3bed83e26646997d3bcccda77c60405160405180910390a250565b611786612b89565b73ffffffffffffffffffffffffffffffffffffffff166117a461162b565b73ffffffffffffffffffffffffffffffffffffffff16146117fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f190613998565b60405180910390fd5b80606c819055507f2b47c83dfa951a422411b397c029d005c87d9fa8fe9f6d2bc2620c23e5e00312606c546040516118329190613aba565b60405180910390a150565b611845612b89565b73ffffffffffffffffffffffffffffffffffffffff1661186361162b565b73ffffffffffffffffffffffffffffffffffffffff16146118b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b090613998565b60405180910390fd5b806068819055507f14a368a696aca40efd280b31b2896f421c8a75eb772f8de1731eb220735395c6816040516118ef9190613aba565b60405180910390a150565b611902612b89565b73ffffffffffffffffffffffffffffffffffffffff1661192061162b565b73ffffffffffffffffffffffffffffffffffffffff1614611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196d90613998565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dd906138f8565b60405180910390fd5b80606b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f5dc8a57b462a8fae72fded55639269f100cfd12e046986a8ef490d56d5edcbf760405160405180910390a250565b611a75612d6f565b6000606e60008481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201600680602002604051908101604052809291908260068015611af9576020028201915b815481526020019060010190808311611ae5575b5050505050815250509050600081604001511415611b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4390613a58565b60405180910390fd5b60008082608001519050600091505b6006821015611ba4576001818360068110611b7957611b78614057565b5b60200201818151611b8a9190613d45565b915081815250508180611b9c90613f7f565b925050611b5b565b60008092505b6006831015611bef5783608001518360068110611bca57611bc9614057565b5b602002015181611bda9190613d45565b90508280611be790613f7f565b935050611baa565b611bf7612d6f565b600080600095505b6006861015611d0a576000841415611c1a5760009050611c2d565b838760400151611c2a9190613fc8565b90505b600091505b6006821015611cf75780858360068110611c4f57611c4e614057565b5b60200201511115611cbf57848260068110611c6d57611c6c614057565b5b602002015184611c7d9190613e26565b93506000858360068110611c9457611c93614057565b5b60200201818152505081838760068110611cb157611cb0614057565b5b602002018181525050611cf7565b848260068110611cd257611cd1614057565b5b602002015181611ce29190613e26565b90508180611cef90613f7f565b925050611c32565b8580611d0290613f7f565b965050611bff565b82975050505050505050919050565b606e6020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60675481565b600080606e60008581526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201600680602002604051908101604052809291908260068015611dd4576020028201915b815481526020019060010190808311611dc0575b50505050508152505090506001835114611e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1a90613918565b60405180910390fd5b600080600090505b6006811015611e705782608001518160068110611e4b57611e4a614057565b5b602002015182611e5b9190613d45565b91508080611e6890613f7f565b915050611e2b565b6000821415611e8457819350505050611edc565b816402540be400846080015187600081518110611ea457611ea3614057565b5b602002602001015160068110611ebd57611ebc614057565b5b6020020151611ecc9190613dcc565b611ed69190613d9b565b93505050505b92915050565b606060006071600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611f8057602002820191906000526020600020905b815481526020019060010190808311611f6c575b50505050509050600080825167ffffffffffffffff811115611fa557611fa4614086565b5b604051908082528060200260200182016040528015611fde57816020015b611fcb612cdb565b815260200190600190039081611fc35790505b509050600091505b825182101561218157606f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083838151811061204157612040614057565b5b60200260200101518154811061205a57612059614057565b5b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180548060200260200160405190810160405280929190818152602001828054801561212c57602002820191906000526020600020905b815481526020019060010190808311612118575b505050505081526020016004820160009054906101000a900460ff16151515158152505081838151811061216357612162614057565b5b6020026020010181905250818061217990613f7f565b925050611fe6565b80935050505092915050565b612195612b89565b73ffffffffffffffffffffffffffffffffffffffff166121b361162b565b73ffffffffffffffffffffffffffffffffffffffff1614612209576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220090613998565b60405180910390fd5b806069819055507f9afc1b03107862b2aabd5adaf9bf3a6c054623803995901416d64d2ac86ed01d8160405161223f9190613aba565b60405180910390a150565b60695481565b600060b44261225f9190613fc8565b60b461226b9190613e26565b426122769190613d45565b905090565b606d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60685481565b6000606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106122fa576122f9614057565b5b906000526020600020906005020190506000606e600083600001548152602001908152602001600020905060008160020154141561236d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236490613978565b60405180910390fd5b8160040160009054906101000a900460ff16156123bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b690613a78565b60405180910390fd5b60006123ce8360000154611a6d565b905060005b836003018054905081101561243c578181600681106123f5576123f4614057565b5b60200201518460030182815481106124105761240f614057565b5b90600052602060002001541461242957505050506125c1565b808061243490613f7f565b9150506123d3565b600061249e85600001548660030180548060200260200160405190810160405280929190818152602001828054801561249457602002820191906000526020600020905b815481526020019060010190808311612480575b5050505050611d4f565b90506000816402540be40087600101546124b89190613dcc565b6124c29190613d9b565b905060018660040160006101000a81548160ff021916908315150217905550808560010160008282546124f59190613d45565b92505081905550806066600082825461250e9190613e26565b925050819055503373ffffffffffffffffffffffffffffffffffffffff1686600001547fef0068ac9e6ad3b19d182459af297eb4d144e7721b87c619278bed0fcd0bd5dc8860010154896003018560405161256b93929190613b15565b60405180910390a33373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156125b9573d6000803e3d6000fd5b505050505050505b50565b60b481565b6125d1612b89565b73ffffffffffffffffffffffffffffffffffffffff166125ef61162b565b73ffffffffffffffffffffffffffffffffffffffff1614612645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263c90613998565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ac90613898565b60405180910390fd5b6126be81612b91565b50565b6000606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b606f602052816000526040600020818154811061272957600080fd5b9060005260206000209060050201600091509150508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900460ff16905084565b61278f612b89565b73ffffffffffffffffffffffffffffffffffffffff166127ad61162b565b73ffffffffffffffffffffffffffffffffffffffff1614612803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fa90613998565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286a906138f8565b60405180910390fd5b80606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f12c87c4c1bec313f335ef0060b241de51ec549e8c57a25aae98da2ad10837cde60405160405180910390a250565b60008060019054906101000a900460ff16156129715760018260ff16148015612929575061292730612c57565b155b612968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295f90613958565b60405180910390fd5b600090506129e5565b8160ff1660008054906101000a900460ff1660ff16106129c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bd90613958565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff16612a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3090613a38565b60405180910390fd5b612a41612c7a565b565b600060b482612a529190613fc8565b14612a92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a89906139f8565b60405180910390fd5b606754811015612ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ace906138d8565b60405180910390fd5b6000606e60008381526020019081526020016000206002015414612b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b27906139d8565b60405180910390fd5b6000607060008381526020019081526020016000205414612b86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7d90613938565b60405180910390fd5b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612cc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc090613a38565b60405180910390fd5b612cd9612cd4612b89565b612b91565b565b6040518060a001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000151581525090565b828054828255906000526020600020908101928215612d5e579160200282015b82811115612d5d578251825591602001919060010190612d42565b5b509050612d6b9190612d91565b5090565b6040518060c00160405280600690602082028036833780820191505090505090565b5b80821115612daa576000816000905550600101612d92565b5090565b6000612dc1612dbc84613c2b565b613c06565b90508083825260208201905082856020860282011115612de457612de36140d2565b5b60005b85811015612e145781612dfa8882612ecc565b845260208401935060208301925050600181019050612de7565b5050509392505050565b600081359050612e2d81614458565b92915050565b60008083601f840112612e4957612e486140cd565b5b8235905067ffffffffffffffff811115612e6657612e656140c8565b5b602083019150836020820283011115612e8257612e816140d2565b5b9250929050565b600082601f830112612e9e57612e9d6140cd565b5b8135612eae848260208601612dae565b91505092915050565b600081359050612ec68161446f565b92915050565b600081359050612edb81614486565b92915050565b600081519050612ef081614486565b92915050565b600060208284031215612f0c57612f0b6140e1565b5b6000612f1a84828501612e1e565b91505092915050565b60008060408385031215612f3a57612f396140e1565b5b6000612f4885828601612e1e565b9250506020612f5985828601612ecc565b9150509250929050565b60008060008060008060c08789031215612f8057612f7f6140e1565b5b6000612f8e89828a01612e1e565b9650506020612f9f89828a01612ecc565b9550506040612fb089828a01612ecc565b9450506060612fc189828a01612e1e565b9350506080612fd289828a01612e1e565b92505060a0612fe389828a01612ecc565b9150509295509295509295565b600060208284031215613006576130056140e1565b5b600061301484828501612eb7565b91505092915050565b600060208284031215613033576130326140e1565b5b600061304184828501612ecc565b91505092915050565b6000602082840312156130605761305f6140e1565b5b600061306e84828501612ee1565b91505092915050565b6000806000606084860312156130905761308f6140e1565b5b600061309e86828701612ecc565b93505060206130af86828701612e1e565b92505060406130c086828701612ecc565b9150509250925092565b6000806000604084860312156130e3576130e26140e1565b5b60006130f186828701612ecc565b935050602084013567ffffffffffffffff811115613112576131116140d7565b5b61311e86828701612e33565b92509250509250925092565b60008060408385031215613141576131406140e1565b5b600061314f85828601612ecc565b925050602083013567ffffffffffffffff8111156131705761316f6140d7565b5b61317c85828601612e89565b9150509250929050565b6000613192838361367c565b905092915050565b60006131a68383613768565b60208301905092915050565b6131bb81613e64565b82525050565b6131ca81613e64565b82525050565b60006131db82613c96565b6131e58185613cf6565b9350836020820285016131f785613c57565b8060005b8581101561323357848403895281516132148582613186565b945061321f83613cc2565b925060208a019950506001810190506131fb565b50829750879550505050505092915050565b61324e81613ca1565b6132588184613d07565b925061326382613c67565b8060005b8381101561329457815161327b878261319a565b965061328683613ccf565b925050600181019050613267565b505050505050565b60006132a88385613d23565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156132db576132da6140dc565b5b6020830292506132ec838584613f25565b82840190509392505050565b600061330382613cac565b61330d8185613d12565b935061331883613c71565b8060005b83811015613349578151613330888261319a565b975061333b83613cdc565b92505060018101905061331c565b5085935050505092915050565b600061336182613cb7565b61336b8185613d23565b935061337683613c81565b8060005b838110156133ae5761338b826140b5565b613395888261319a565b97506133a083613ce9565b92505060018101905061337a565b5085935050505092915050565b6133c481613e76565b82525050565b6133d381613e76565b82525050565b6133e281613ecb565b82525050565b6133f181613edd565b82525050565b61340081613eef565b82525050565b6000613413601c83613d34565b915061341e82614104565b602082019050919050565b6000613436601683613d34565b91506134418261412d565b602082019050919050565b6000613459602683613d34565b915061346482614156565b604082019050919050565b600061347c601a83613d34565b9150613487826141a5565b602082019050919050565b600061349f601683613d34565b91506134aa826141ce565b602082019050919050565b60006134c2601683613d34565b91506134cd826141f7565b602082019050919050565b60006134e5602083613d34565b91506134f082614220565b602082019050919050565b6000613508600d83613d34565b915061351382614249565b602082019050919050565b600061352b602e83613d34565b915061353682614272565b604082019050919050565b600061354e601183613d34565b9150613559826142c1565b602082019050919050565b6000613571602083613d34565b915061357c826142ea565b602082019050919050565b6000613594601883613d34565b915061359f82614313565b602082019050919050565b60006135b7600d83613d34565b91506135c28261433c565b602082019050919050565b60006135da600f83613d34565b91506135e582614365565b602082019050919050565b60006135fd601d83613d34565b91506136088261438e565b602082019050919050565b6000613620602b83613d34565b915061362b826143b7565b604082019050919050565b6000613643601483613d34565b915061364e82614406565b602082019050919050565b6000613666601083613d34565b91506136718261442f565b602082019050919050565b600060a0830160008301516136946000860182613768565b5060208301516136a76020860182613768565b5060408301516136ba60408601826131b2565b50606083015184820360608601526136d282826132f8565b91505060808301516136e760808601826133bb565b508091505092915050565b600060a08301600083015161370a6000860182613768565b50602083015161371d6020860182613768565b50604083015161373060408601826131b2565b506060830151848203606086015261374882826132f8565b915050608083015161375d60808601826133bb565b508091505092915050565b61377181613eb4565b82525050565b61378081613eb4565b82525050565b600060208201905061379b60008301846131c1565b92915050565b60006040820190506137b660008301856131c1565b6137c36020830184613777565b9392505050565b600060208201905081810360008301526137e481846131d0565b905092915050565b600060c0820190506138016000830184613245565b92915050565b600060208201905061381c60008301846133d9565b92915050565b600060208201905061383760008301846133e8565b92915050565b600060208201905061385260008301846133f7565b92915050565b6000602082019050818103600083015261387181613406565b9050919050565b6000602082019050818103600083015261389181613429565b9050919050565b600060208201905081810360008301526138b18161344c565b9050919050565b600060208201905081810360008301526138d18161346f565b9050919050565b600060208201905081810360008301526138f181613492565b9050919050565b60006020820190508181036000830152613911816134b5565b9050919050565b60006020820190508181036000830152613931816134d8565b9050919050565b60006020820190508181036000830152613951816134fb565b9050919050565b600060208201905081810360008301526139718161351e565b9050919050565b6000602082019050818103600083015261399181613541565b9050919050565b600060208201905081810360008301526139b181613564565b9050919050565b600060208201905081810360008301526139d181613587565b9050919050565b600060208201905081810360008301526139f1816135aa565b9050919050565b60006020820190508181036000830152613a11816135cd565b9050919050565b60006020820190508181036000830152613a31816135f0565b9050919050565b60006020820190508181036000830152613a5181613613565b9050919050565b60006020820190508181036000830152613a7181613636565b9050919050565b60006020820190508181036000830152613a9181613659565b9050919050565b60006020820190508181036000830152613ab281846136f2565b905092915050565b6000602082019050613acf6000830184613777565b92915050565b6000606082019050613aea6000830187613777565b8181036020830152613afd81858761329c565b9050613b0c6040830184613777565b95945050505050565b6000606082019050613b2a6000830186613777565b8181036020830152613b3c8185613356565b9050613b4b6040830184613777565b949350505050565b6000604082019050613b686000830185613777565b613b756020830184613777565b9392505050565b6000608082019050613b916000830187613777565b613b9e6020830186613777565b613bab60408301856131c1565b613bb860608301846133ca565b95945050505050565b6000608082019050613bd66000830187613777565b613be36020830186613777565b613bf06040830185613777565b613bfd6060830184613777565b95945050505050565b6000613c10613c21565b9050613c1c8282613f4e565b919050565b6000604051905090565b600067ffffffffffffffff821115613c4657613c45614086565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600060069050919050565b600081519050919050565b600081549050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000600182019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613d5082613eb4565b9150613d5b83613eb4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d9057613d8f613ff9565b5b828201905092915050565b6000613da682613eb4565b9150613db183613eb4565b925082613dc157613dc0614028565b5b828204905092915050565b6000613dd782613eb4565b9150613de283613eb4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e1b57613e1a613ff9565b5b828202905092915050565b6000613e3182613eb4565b9150613e3c83613eb4565b925082821015613e4f57613e4e613ff9565b5b828203905092915050565b6000819050919050565b6000613e6f82613e94565b9050919050565b60008115159050919050565b6000613e8d82613e64565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613ed682613f01565b9050919050565b6000613ee882613f01565b9050919050565b6000613efa82613ebe565b9050919050565b6000613f0c82613f13565b9050919050565b6000613f1e82613e94565b9050919050565b82818337600083830152505050565b6000613f47613f42836140f7565b613e5a565b9050919050565b613f57826140e6565b810181811067ffffffffffffffff82111715613f7657613f75614086565b5b80604052505050565b6000613f8a82613eb4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613fbd57613fbc613ff9565b5b600182019050919050565b6000613fd382613eb4565b9150613fde83613eb4565b925082613fee57613fed614028565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006140c18254613f34565b9050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b7f52616e646f6d6e65737320616c72656164792066756c66696c6c656400000000600082015250565b7f4265742061626f7665206d6178426574206c696d697400000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420416c6c6f7765642072616e646f6d50726f7669646572000000000000600082015250565b7f4c6976696e6720696e2074686520706173742062726f00000000000000000000600082015250565b7f46656520616464726573732063616e2774206265203000000000000000000000600082015250565b7f4f6e6c792077696e206265742063757272656e746c7920737570706f72746564600082015250565b7f526163652066696e6973696e6700000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f52616365206e6f742066696e6973686564000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f526573756c7420616c7265616479207265717565737465640000000000000000600082015250565b7f526163652066696e697368656400000000000000000000000000000000000000600082015250565b7f496e76616c696420726163652049440000000000000000000000000000000000600082015250565b7f5261636520726573756c7420616c72656164792066756c66696c6c6564000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f52616365206973206e6f742066696e6973686564000000000000000000000000600082015250565b7f42657420616c7265616479207061696400000000000000000000000000000000600082015250565b61446181613e64565b811461446c57600080fd5b50565b61447881613e82565b811461448357600080fd5b50565b61448f81613eb4565b811461449a57600080fd5b5056fea2646970667358221220401938621da2dc292ee2914dab93392289050709f8e11d819eaef01eb013b32f64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "An betting game with exotic bet types",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Payout(uint256,address,uint256,uint256[],uint256)": {
        "notice": "emitted when a bet is cashed out."
      },
      "RaceEnd(uint256,uint256,uint256)": {
        "notice": "emitted when a race ends."
      },
      "RaceStart(uint256,uint256)": {
        "notice": "emitted when a race starts."
      },
      "Wagered(uint256,address,uint256,uint256[],uint256)": {
        "notice": "emitted when a new bet is placed on a race."
      }
    },
    "kind": "user",
    "methods": {
      "bet(address,uint256)": {
        "notice": "mapping of address to list of bets."
      },
      "endRace(uint256,uint256[])": {
        "notice": "End the race and set the result."
      },
      "fee()": {
        "notice": "Fee paramaters."
      },
      "frequency()": {
        "notice": "How often races take place."
      },
      "nextRaceId()": {
        "notice": "The time of the next race to take place."
      },
      "odds(uint256,uint256[])": {
        "notice": "Get the current odds for a prediction."
      },
      "payout(uint256)": {
        "notice": "Cash out a winning bet."
      },
      "placeBet(uint256,uint256[])": {
        "notice": "Place a bet."
      },
      "race(uint256)": {
        "notice": "The state for each race."
      },
      "raceResult(uint256)": {
        "notice": "Return the results for a race."
      },
      "start()": {
        "notice": "The datetime of the first race."
      },
      "startRace(uint256)": {
        "notice": "Start the race and request result from VRF."
      },
      "userBet(address,uint256)": {
        "notice": "Returns a users bet with given id."
      },
      "userBetCount(address)": {
        "notice": "Return the amount of bets a user has made."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 549,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 565,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "randomProvider",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IRandomProvider)1756"
      },
      {
        "astId": 567,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "balance",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 574,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "start",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 577,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "fee",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 579,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "jackpotContribution",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 581,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "feeAddress",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 583,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "jackpotAddress",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 585,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "maxBet",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 588,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "rewarder",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IRewarder)1776"
      },
      {
        "astId": 619,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "race",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_uint256,t_struct(Race)613_storage)"
      },
      {
        "astId": 626,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "bet",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_array(t_struct(Bet)600_storage)dyn_storage)"
      },
      {
        "astId": 631,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "requestIdRace",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 638,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "betsPerRace",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bet)600_storage)dyn_storage": {
        "base": "t_struct(Bet)600_storage",
        "encoding": "dynamic_array",
        "label": "struct Exotic.Bet[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)6_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[6]",
        "numberOfBytes": "192"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRandomProvider)1756": {
        "encoding": "inplace",
        "label": "contract IRandomProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)1776": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Bet)600_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Exotic.Bet[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Bet)600_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_struct(Race)613_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Exotic.Race)",
        "numberOfBytes": "32",
        "value": "t_struct(Race)613_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bet)600_storage": {
        "encoding": "inplace",
        "label": "struct Exotic.Bet",
        "members": [
          {
            "astId": 590,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "raceId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 592,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 594,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "account",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 597,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "place",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 599,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "paid",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Race)613_storage": {
        "encoding": "inplace",
        "label": "struct Exotic.Race",
        "members": [
          {
            "astId": 602,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "totalWagered",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 604,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "paid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 606,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "result",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 608,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "requestId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 612,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "winWeights",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)6_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}