{
  "address": "0xa03965444D77c5F0221fcf7B51850247638A0fbe",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RewardTokenSet",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "accRewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xtc",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9e1fa322cdb9c3f6b709c0530b4ebf56a10f579055a769f22aa8f465ead5cb58",
  "receipt": {
    "to": null,
    "from": "0x1604F1c0aF9765D940519cd2593292b3cE3Ba3CE",
    "contractAddress": "0xa03965444D77c5F0221fcf7B51850247638A0fbe",
    "transactionIndex": 0,
    "gasUsed": "899790",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xef0d7cb17f9b4bf8936a914741f57d03acac313f37b7e5cdd5e7accc6e325a11",
    "transactionHash": "0x9e1fa322cdb9c3f6b709c0530b4ebf56a10f579055a769f22aa8f465ead5cb58",
    "logs": [],
    "blockNumber": 11588588,
    "cumulativeGasUsed": "899790",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "06dee127b922187235cbb281ec22fde7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenSet\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xtc\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EquityFarm.sol\":\"EquityFarm\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/EquityFarm.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n\\n\\n// The equity farm is where you can stake xtc tokens in exchange\\n// for a share of the protocol fees.\\n\\ncontract EquityFarm is Initializable, OwnableUpgradeable{\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 claimable;\\n    }\\n    mapping(address => UserInfo) public users;\\n    IERC20Upgradeable public xtc;\\n    uint256 public lastRewardBalance;\\n    uint256 public accRewardPerShare;\\n    uint256 private claimable;\\n    uint256 private constant PRECISION = 1e18;\\n\\n    event RewardTokenSet(address indexed token);\\n\\n    function initialize() public initializer{\\n        __Ownable_init();\\n    }\\n\\n    function setToken(IERC20Upgradeable _token) external onlyOwner {\\n        require(address(_token) != address(0), \\\"Reward token can't be 0 address\\\");\\n        xtc = _token;\\n        emit RewardTokenSet(address(_token));\\n    }\\n\\n    function deposit(uint256 amount) external {\\n        UserInfo storage user = users[msg.sender];\\n        updateReward();\\n\\n        uint256 previousAmount = user.amount;\\n        user.amount += amount;\\n\\n        uint256 previousRewardDebt = user.rewardDebt;\\n        user.rewardDebt = (user.amount * accRewardPerShare) / PRECISION;\\n\\n        uint256 pending = (previousAmount * accRewardPerShare) /\\n            PRECISION -\\n            previousRewardDebt;\\n\\n        user.claimable += pending;\\n        claimable += pending;\\n        lastRewardBalance -= pending;\\n\\n        xtc.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        UserInfo storage user = users[msg.sender];\\n        require(user.amount >= amount, \\\"Invalid withdraw amount\\\");\\n        updateReward();\\n\\n        uint256 previousAmount = user.amount;\\n        user.amount -= amount;\\n\\n        uint256 previousRewardDebt = user.rewardDebt;\\n        user.rewardDebt = (user.amount * accRewardPerShare) / PRECISION;\\n\\n        uint256 pending = (previousAmount * accRewardPerShare) /\\n            PRECISION -\\n            previousRewardDebt;\\n\\n        user.claimable += pending;\\n        claimable += pending;\\n        lastRewardBalance -= pending;\\n        xtc.transfer(msg.sender, amount);\\n    }\\n\\n    function pendingReward(address account) public view returns (uint256) {\\n        UserInfo storage user = users[account];\\n        uint256 _totalxtc = xtc.balanceOf(address(this));\\n        uint256 _accRewardPerShare = accRewardPerShare;\\n        uint256 _rewardBalance = address(this).balance - claimable;\\n\\n        if (_rewardBalance != lastRewardBalance && _totalxtc != 0) {\\n            uint256 _accruedReward = _rewardBalance - lastRewardBalance;\\n            _accRewardPerShare =\\n                _accRewardPerShare +\\n                ((_accruedReward * PRECISION) / _totalxtc);\\n        }\\n        return\\n            (user.amount * _accRewardPerShare) /\\n            PRECISION -\\n            user.rewardDebt +\\n            user.claimable;\\n    }\\n\\n    function claim() external {\\n        UserInfo storage user = users[msg.sender];\\n        updateReward();\\n\\n        uint256 pending = (user.amount * accRewardPerShare) /\\n            PRECISION -\\n            user.rewardDebt;\\n        uint256 claiming = user.claimable;\\n        uint256 total = pending + claiming;\\n\\n        claimable -= claiming;\\n        user.claimable = 0;\\n        user.rewardDebt = (user.amount * accRewardPerShare) / PRECISION;\\n        lastRewardBalance -= pending;\\n        payable(msg.sender).transfer(total);\\n    }\\n\\n    function updateReward() public {\\n        uint256 rewardBalance = address(this).balance - claimable;\\n        if (rewardBalance == lastRewardBalance) return;\\n        uint256 accrued = rewardBalance - lastRewardBalance;\\n        accRewardPerShare += ((accrued * PRECISION) /\\n            xtc.balanceOf(address(this)));\\n        lastRewardBalance = rewardBalance;\\n    }\\n    fallback() external payable {}\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x412437d5385dd1baed02a0d4ad8af41bc4cc4d6389718e9c5a670e22f57f282a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f59806100206000396000f3fe6080604052600436106100d55760003560e01c8063939d623711610079578063f2fde38b11610056578063f2fde38b14610253578063f36c0a7214610273578063f40f0f5214610288578063fa4caa74146102a857005b8063939d6237146101b8578063a87430ba146101dc578063b6b55f251461023357005b80634e71d92d116100b25780634e71d92d1461015b578063715018a6146101705780638129fc1c146101855780638da5cb5b1461019a57005b8063144fa6d7146100de5780632e1a7d4d146100fe57806347f6f34a1461011e57005b366100dc57005b005b3480156100ea57600080fd5b506100dc6100f9366004610e10565b6102be565b34801561010a57600080fd5b506100dc610119366004610e56565b6103ca565b34801561012a57600080fd5b5060665461013e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016757600080fd5b506100dc610596565b34801561017c57600080fd5b506100dc61068c565b34801561019157600080fd5b506100dc6106f2565b3480156101a657600080fd5b506033546001600160a01b031661013e565b3480156101c457600080fd5b506101ce60685481565b604051908152602001610152565b3480156101e857600080fd5b506102186101f7366004610e10565b60656020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610152565b34801561023f57600080fd5b506100dc61024e366004610e56565b610767565b34801561025f57600080fd5b506100dc61026e366004610e10565b610892565b34801561027f57600080fd5b506100dc610971565b34801561029457600080fd5b506101ce6102a3366004610e10565b610a54565b3480156102b457600080fd5b506101ce60675481565b6033546001600160a01b0316331461031d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166103735760405162461bcd60e51b815260206004820152601f60248201527f52657761726420746f6b656e2063616e277420626520302061646472657373006044820152606401610314565b6066805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2d6b04df9b7d358407d1a014f1114b064add34c19d63d395db155a7e533e967a90600090a250565b336000908152606560205260409020805482111561042a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420776974686472617720616d6f756e740000000000000000006044820152606401610314565b610432610971565b8054828260006104428385610ee1565b909155505060018201546068548354670de0b6b3a76400009161046491610ec2565b61046e9190610ea0565b60018401556068546000908290670de0b6b3a76400009061048f9086610ec2565b6104999190610ea0565b6104a39190610ee1565b9050808460020160008282546104b99190610e88565b9250508190555080606960008282546104d29190610e88565b9250508190555080606760008282546104eb9190610ee1565b90915550506066546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018790526001600160a01b039091169063a9059cbb906044015b602060405180830381600087803b15801561055657600080fd5b505af115801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610e34565b505050505050565b3360009081526065602052604090206105ad610971565b60008160010154670de0b6b3a764000060685484600001546105cf9190610ec2565b6105d99190610ea0565b6105e39190610ee1565b600283015490915060006105f78284610e88565b9050816069600082825461060b9190610ee1565b9091555050600060028501556068548454670de0b6b3a76400009161062f91610ec2565b6106399190610ea0565b846001018190555082606760008282546106539190610ee1565b9091555050604051339082156108fc029083906000818181858888f19350505050158015610685573d6000803e3d6000fd5b5050505050565b6033546001600160a01b031633146106e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610314565b6106f06000610b9b565b565b60006106fe6001610bfa565b90508015610716576000805461ff0019166101001790555b61071e610d2e565b8015610764576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b33600090815260656020526040902061077e610971565b80548282600061078e8385610e88565b909155505060018201546068548354670de0b6b3a7640000916107b091610ec2565b6107ba9190610ea0565b60018401556068546000908290670de0b6b3a7640000906107db9086610ec2565b6107e59190610ea0565b6107ef9190610ee1565b9050808460020160008282546108059190610e88565b92505081905550806069600082825461081e9190610e88565b9250508190555080606760008282546108379190610ee1565b90915550506066546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526001600160a01b03909116906323b872dd9060640161053c565b6033546001600160a01b031633146108ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610314565b6001600160a01b0381166109685760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610314565b61076481610b9b565b6000606954476109819190610ee1565b90506067548114156109905750565b6000606754826109a09190610ee1565b6066546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b1580156109e457600080fd5b505afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190610e6f565b610a2e670de0b6b3a764000083610ec2565b610a389190610ea0565b60686000828254610a499190610e88565b909155505050606755565b6001600160a01b0381811660009081526065602052604080822060665491516370a0823160e01b8152306004820152929390928492909116906370a082319060240160206040518083038186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190610e6f565b60685460695491925090600090610afd9047610ee1565b90506067548114158015610b1057508215155b15610b5257600060675482610b259190610ee1565b905083610b3a670de0b6b3a764000083610ec2565b610b449190610ea0565b610b4e9084610e88565b9250505b600284015460018501548554670de0b6b3a764000090610b73908690610ec2565b610b7d9190610ea0565b610b879190610ee1565b610b919190610e88565b9695505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615610c97578160ff166001148015610c1d5750303b155b610c8f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610314565b506000919050565b60005460ff808416911610610d145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610314565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16610d995760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610314565b6106f0600054610100900460ff16610e075760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610314565b6106f033610b9b565b600060208284031215610e2257600080fd5b8135610e2d81610f0e565b9392505050565b600060208284031215610e4657600080fd5b81518015158114610e2d57600080fd5b600060208284031215610e6857600080fd5b5035919050565b600060208284031215610e8157600080fd5b5051919050565b60008219821115610e9b57610e9b610ef8565b500190565b600082610ebd57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610edc57610edc610ef8565b500290565b600082821015610ef357610ef3610ef8565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461076457600080fdfea2646970667358221220a3a2ce45ac812fd7965f2c3d78efcc995fc14c378c08eab2234a3037439a651d64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100d55760003560e01c8063939d623711610079578063f2fde38b11610056578063f2fde38b14610253578063f36c0a7214610273578063f40f0f5214610288578063fa4caa74146102a857005b8063939d6237146101b8578063a87430ba146101dc578063b6b55f251461023357005b80634e71d92d116100b25780634e71d92d1461015b578063715018a6146101705780638129fc1c146101855780638da5cb5b1461019a57005b8063144fa6d7146100de5780632e1a7d4d146100fe57806347f6f34a1461011e57005b366100dc57005b005b3480156100ea57600080fd5b506100dc6100f9366004610e10565b6102be565b34801561010a57600080fd5b506100dc610119366004610e56565b6103ca565b34801561012a57600080fd5b5060665461013e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016757600080fd5b506100dc610596565b34801561017c57600080fd5b506100dc61068c565b34801561019157600080fd5b506100dc6106f2565b3480156101a657600080fd5b506033546001600160a01b031661013e565b3480156101c457600080fd5b506101ce60685481565b604051908152602001610152565b3480156101e857600080fd5b506102186101f7366004610e10565b60656020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610152565b34801561023f57600080fd5b506100dc61024e366004610e56565b610767565b34801561025f57600080fd5b506100dc61026e366004610e10565b610892565b34801561027f57600080fd5b506100dc610971565b34801561029457600080fd5b506101ce6102a3366004610e10565b610a54565b3480156102b457600080fd5b506101ce60675481565b6033546001600160a01b0316331461031d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166103735760405162461bcd60e51b815260206004820152601f60248201527f52657761726420746f6b656e2063616e277420626520302061646472657373006044820152606401610314565b6066805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2d6b04df9b7d358407d1a014f1114b064add34c19d63d395db155a7e533e967a90600090a250565b336000908152606560205260409020805482111561042a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420776974686472617720616d6f756e740000000000000000006044820152606401610314565b610432610971565b8054828260006104428385610ee1565b909155505060018201546068548354670de0b6b3a76400009161046491610ec2565b61046e9190610ea0565b60018401556068546000908290670de0b6b3a76400009061048f9086610ec2565b6104999190610ea0565b6104a39190610ee1565b9050808460020160008282546104b99190610e88565b9250508190555080606960008282546104d29190610e88565b9250508190555080606760008282546104eb9190610ee1565b90915550506066546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018790526001600160a01b039091169063a9059cbb906044015b602060405180830381600087803b15801561055657600080fd5b505af115801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610e34565b505050505050565b3360009081526065602052604090206105ad610971565b60008160010154670de0b6b3a764000060685484600001546105cf9190610ec2565b6105d99190610ea0565b6105e39190610ee1565b600283015490915060006105f78284610e88565b9050816069600082825461060b9190610ee1565b9091555050600060028501556068548454670de0b6b3a76400009161062f91610ec2565b6106399190610ea0565b846001018190555082606760008282546106539190610ee1565b9091555050604051339082156108fc029083906000818181858888f19350505050158015610685573d6000803e3d6000fd5b5050505050565b6033546001600160a01b031633146106e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610314565b6106f06000610b9b565b565b60006106fe6001610bfa565b90508015610716576000805461ff0019166101001790555b61071e610d2e565b8015610764576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b33600090815260656020526040902061077e610971565b80548282600061078e8385610e88565b909155505060018201546068548354670de0b6b3a7640000916107b091610ec2565b6107ba9190610ea0565b60018401556068546000908290670de0b6b3a7640000906107db9086610ec2565b6107e59190610ea0565b6107ef9190610ee1565b9050808460020160008282546108059190610e88565b92505081905550806069600082825461081e9190610e88565b9250508190555080606760008282546108379190610ee1565b90915550506066546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526001600160a01b03909116906323b872dd9060640161053c565b6033546001600160a01b031633146108ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610314565b6001600160a01b0381166109685760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610314565b61076481610b9b565b6000606954476109819190610ee1565b90506067548114156109905750565b6000606754826109a09190610ee1565b6066546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b1580156109e457600080fd5b505afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190610e6f565b610a2e670de0b6b3a764000083610ec2565b610a389190610ea0565b60686000828254610a499190610e88565b909155505050606755565b6001600160a01b0381811660009081526065602052604080822060665491516370a0823160e01b8152306004820152929390928492909116906370a082319060240160206040518083038186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190610e6f565b60685460695491925090600090610afd9047610ee1565b90506067548114158015610b1057508215155b15610b5257600060675482610b259190610ee1565b905083610b3a670de0b6b3a764000083610ec2565b610b449190610ea0565b610b4e9084610e88565b9250505b600284015460018501548554670de0b6b3a764000090610b73908690610ec2565b610b7d9190610ea0565b610b879190610ee1565b610b919190610e88565b9695505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615610c97578160ff166001148015610c1d5750303b155b610c8f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610314565b506000919050565b60005460ff808416911610610d145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610314565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16610d995760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610314565b6106f0600054610100900460ff16610e075760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610314565b6106f033610b9b565b600060208284031215610e2257600080fd5b8135610e2d81610f0e565b9392505050565b600060208284031215610e4657600080fd5b81518015158114610e2d57600080fd5b600060208284031215610e6857600080fd5b5035919050565b600060208284031215610e8157600080fd5b5051919050565b60008219821115610e9b57610e9b610ef8565b500190565b600082610ebd57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610edc57610edc610ef8565b500290565b600082821015610ef357610ef3610ef8565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461076457600080fdfea2646970667358221220a3a2ce45ac812fd7965f2c3d78efcc995fc14c378c08eab2234a3037439a651d64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 277,
        "contract": "contracts/EquityFarm.sol:EquityFarm",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 280,
        "contract": "contracts/EquityFarm.sol:EquityFarm",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 774,
        "contract": "contracts/EquityFarm.sol:EquityFarm",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 157,
        "contract": "contracts/EquityFarm.sol:EquityFarm",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 269,
        "contract": "contracts/EquityFarm.sol:EquityFarm",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3072,
        "contract": "contracts/EquityFarm.sol:EquityFarm",
        "label": "users",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_struct(UserInfo)3067_storage)"
      },
      {
        "astId": 3075,
        "contract": "contracts/EquityFarm.sol:EquityFarm",
        "label": "xtc",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IERC20Upgradeable)490"
      },
      {
        "astId": 3077,
        "contract": "contracts/EquityFarm.sol:EquityFarm",
        "label": "lastRewardBalance",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 3079,
        "contract": "contracts/EquityFarm.sol:EquityFarm",
        "label": "accRewardPerShare",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 3081,
        "contract": "contracts/EquityFarm.sol:EquityFarm",
        "label": "claimable",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)490": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3067_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EquityFarm.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3067_storage"
      },
      "t_struct(UserInfo)3067_storage": {
        "encoding": "inplace",
        "label": "struct EquityFarm.UserInfo",
        "members": [
          {
            "astId": 3062,
            "contract": "contracts/EquityFarm.sol:EquityFarm",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3064,
            "contract": "contracts/EquityFarm.sol:EquityFarm",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3066,
            "contract": "contracts/EquityFarm.sol:EquityFarm",
            "label": "claimable",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}