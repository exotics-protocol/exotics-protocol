{
  "address": "0x5175cF53DDd3D0b5cb23a799886235b5F7FeCD42",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "frequency",
          "type": "uint64"
        }
      ],
      "name": "FrequencyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBet",
          "type": "uint256"
        }
      ],
      "name": "MaxBetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "polAddress",
          "type": "address"
        }
      ],
      "name": "POLAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "polFee",
          "type": "uint256"
        }
      ],
      "name": "POLFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "prediction",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revenueAddress",
          "type": "address"
        }
      ],
      "name": "RevenueAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revenueFee",
          "type": "uint256"
        }
      ],
      "name": "RevenueFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "RewarderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "RollEnd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        }
      ],
      "name": "RollStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "prediction",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolTotal",
          "type": "uint256"
        }
      ],
      "name": "Wagered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "prediction",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        }
      ],
      "name": "betsOnRoll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "rollId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "prediction",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            }
          ],
          "internalType": "struct Exotic.Bet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "betsPerRoll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRollId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        }
      ],
      "name": "currentWeight",
      "outputs": [
        {
          "internalType": "uint256[6]",
          "name": "",
          "type": "uint256[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "endRoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frequency",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_randomProviderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_revenueFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_polFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_revenueAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_polAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxBet",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_frequency",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRollId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        }
      ],
      "name": "odds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "payout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "prediction",
          "type": "uint8"
        }
      ],
      "name": "placeBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomProvider",
      "outputs": [
        {
          "internalType": "contract IRandomProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "contract IRewarder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        }
      ],
      "name": "rollResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        }
      ],
      "name": "startRoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        }
      ],
      "name": "totalWagered",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_frequency",
          "type": "uint64"
        }
      ],
      "name": "updateFrequency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxBet",
          "type": "uint256"
        }
      ],
      "name": "updateMaxBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_polAddress",
          "type": "address"
        }
      ],
      "name": "updatePOLAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_polFee",
          "type": "uint256"
        }
      ],
      "name": "updatePOLFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_revenueAddress",
          "type": "address"
        }
      ],
      "name": "updateRevenueAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_revenueFee",
          "type": "uint256"
        }
      ],
      "name": "updateRevenueFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "updateRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "userBet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "rollId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "prediction",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            }
          ],
          "internalType": "struct Exotic.Bet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userBetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        }
      ],
      "name": "userRollBet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "rollId",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "prediction",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            }
          ],
          "internalType": "struct Exotic.Bet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rollId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userRollBetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "rollBetId",
          "type": "uint256"
        }
      ],
      "name": "userRollBetId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b6101d11b91f40fb40a803e5f81e1e5a614fd45427e22e18998ec0ba67b40f7",
  "receipt": {
    "to": null,
    "from": "0x900b9Ac28DBE587c2650a070102bae4306100769",
    "contractAddress": "0x5175cF53DDd3D0b5cb23a799886235b5F7FeCD42",
    "transactionIndex": 0,
    "gasUsed": "2608829",
    "logsBloom": "0x
    "blockHash": "0x18f8be94428eea40c0fc01887aed33adbde39ade14a442edf7d9a0dcf0b1805d",
    "transactionHash": "0x3b6101d11b91f40fb40a803e5f81e1e5a614fd45427e22e18998ec0ba67b40f7",
    "logs": [],
    "blockNumber": 17488124,
    "cumulativeGasUsed": "2608829",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "0521f099f8a61c5b40d59c4e57ce3a70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"frequency\",\"type\":\"uint64\"}],\"name\":\"FrequencyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBet\",\"type\":\"uint256\"}],\"name\":\"MaxBetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"polAddress\",\"type\":\"address\"}],\"name\":\"POLAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"polFee\",\"type\":\"uint256\"}],\"name\":\"POLFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revenueAddress\",\"type\":\"address\"}],\"name\":\"RevenueAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revenueFee\",\"type\":\"uint256\"}],\"name\":\"RevenueFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"RewarderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RollEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"name\":\"RollStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTotal\",\"type\":\"uint256\"}],\"name\":\"Wagered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"}],\"name\":\"betsOnRoll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"internalType\":\"struct Exotic.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betsPerRoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRollId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"}],\"name\":\"currentWeight\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"endRoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frequency\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomProviderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_revenueFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_polFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_revenueAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_polAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBet\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_frequency\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRollId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"odds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomProvider\",\"outputs\":[{\"internalType\":\"contract IRandomProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"roll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"}],\"name\":\"rollResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"}],\"name\":\"startRoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"}],\"name\":\"totalWagered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_frequency\",\"type\":\"uint64\"}],\"name\":\"updateFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"updateMaxBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_polAddress\",\"type\":\"address\"}],\"name\":\"updatePOLAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_polFee\",\"type\":\"uint256\"}],\"name\":\"updatePOLFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revenueAddress\",\"type\":\"address\"}],\"name\":\"updateRevenueAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_revenueFee\",\"type\":\"uint256\"}],\"name\":\"updateRevenueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"updateRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"userBet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"internalType\":\"struct Exotic.Bet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"}],\"name\":\"userRollBet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"internalType\":\"struct Exotic.Bet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rollId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userRollBetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"rollBetId\",\"type\":\"uint256\"}],\"name\":\"userRollBetId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"An betting game with exotic bet types\",\"version\":1},\"userdoc\":{\"events\":{\"Payout(uint64,address,uint256,uint8,uint256)\":{\"notice\":\"emitted when a bet is cashed out.\"},\"RollEnd(uint64,uint256,uint256)\":{\"notice\":\"emitted when a roll ends.\"},\"RollStart(uint64,uint256)\":{\"notice\":\"emitted when a roll starts.\"},\"Wagered(uint64,address,uint256,uint8,uint256)\":{\"notice\":\"emitted when a new bet is placed on a role.\"}},\"kind\":\"user\",\"methods\":{\"bet(address,uint256)\":{\"notice\":\"mapping of address to list of bets.\"},\"endRoll(uint256,uint256[])\":{\"notice\":\"End the roll and set the result.\"},\"frequency()\":{\"notice\":\"How often rolls take place.\"},\"nextRollId()\":{\"notice\":\"The time of the next roll to take place.\"},\"odds(uint64,uint8)\":{\"notice\":\"Get the current odds for a prediction.\"},\"payout(uint256)\":{\"notice\":\"Cash out a winning bet.\"},\"placeBet(uint64,uint8)\":{\"notice\":\"Place a bet.\"},\"revenueFee()\":{\"notice\":\"Fee paramaters.\"},\"roll(uint64)\":{\"notice\":\"The state for each roll.\"},\"rollResult(uint64)\":{\"notice\":\"Return the results for a roll.\"},\"start()\":{\"notice\":\"The datetime of the first roll.\"},\"startRoll(uint64)\":{\"notice\":\"Start the roll and request result from VRF.\"},\"userBet(address,uint256)\":{\"notice\":\"returns a users bet with given id.\"},\"userBetCount(address)\":{\"notice\":\"Return the amount of bets a user has made.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exotic.sol\":\"Exotic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Exotic.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IRandomProvider.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\n\\n\\n/// @title An betting game with exotic bet types\\ncontract Exotic is Initializable, OwnableUpgradeable {\\n\\n    IRandomProvider public randomProvider;\\n\\n    /// @notice How often rolls take place.\\n    uint64 public frequency;\\n\\n    /// @notice The datetime of the first roll.\\n    uint256 public start;\\n\\n    /// @notice Fee paramaters.\\n    uint256 public revenueFee;  // House take in bps\\n    uint256 public polFee;  // pol contribution in bps\\n    address public revenueAddress;\\n    address public polAddress;\\n    uint256 public maxBet;\\n\\n    IRewarder public rewarder;\\n\\n    struct Bet {\\n        uint256 amount;\\n        address account;\\n        uint64 rollId;\\n        uint8 prediction;\\n        bool paid;\\n    }\\n\\n    struct Roll {\\n        uint256 result;\\n        uint256 requestId;\\n        uint256[6] winWeights;\\n    }\\n\\n    /// @notice The state for each roll.\\n    mapping(uint64 => Roll) public roll;\\n    /// @notice mapping of address to list of bets.\\n    mapping(address => Bet[]) public bet;\\n    /// @notice used internally to map rolls to VRF requests.\\n    mapping(uint256 => uint64) private requestIdRoll;\\n\\n    mapping(uint256 => mapping(address => uint256[])) public betsPerRoll;\\n\\n    /// @notice emitted when a new bet is placed on a role.\\n    event Wagered(\\n        uint64 indexed rollId,\\n        address indexed from,\\n        uint256 amount,\\n        uint8 prediction,\\n        uint256 poolTotal\\n    );\\n\\n    /// @notice emitted when a bet is cashed out.\\n    event Payout(\\n        uint64 indexed rollId,\\n        address indexed to,\\n        uint256 amount,\\n        uint8 prediction,\\n        uint256 payout\\n    );\\n\\n    /// @notice emitted when a roll starts.\\n    event RollStart(\\n        uint64 indexed rollId,\\n        uint256 totalValue\\n    );\\n    /// @notice emitted when a roll ends.\\n    event RollEnd(\\n        uint64 indexed rollId,\\n        uint256 totalValue,\\n        uint256 result\\n    );\\n\\n    event MaxBetUpdated(uint256 maxBet);\\n    event RevenueAddressUpdated(address indexed revenueAddress);\\n    event RevenueFeeUpdated(uint256 revenueFee);\\n    event POLAddressUpdated(address indexed polAddress);\\n    event POLFeeUpdated(uint256 polFee);\\n    event RewarderUpdated(address indexed rewarder);\\n    event FrequencyUpdated(uint64 frequency);\\n\\n    function initialize(\\n        address _randomProviderAddress,\\n        uint256 _revenueFee,\\n        uint256 _polFee,\\n        address _revenueAddress,\\n        address _polAddress,\\n        uint256 _maxBet,\\n        uint64 _frequency\\n    ) public initializer {\\n        start = block.timestamp;\\n        randomProvider = IRandomProvider(_randomProviderAddress);\\n        revenueFee = _revenueFee;\\n        polFee = _polFee;\\n        revenueAddress = _revenueAddress;\\n        polAddress = _polAddress;\\n        maxBet = _maxBet;\\n        frequency = _frequency;\\n        __Ownable_init();\\n    }\\n\\n    function updateFrequency(uint64 _frequency) external onlyOwner {\\n        frequency = _frequency;\\n        emit FrequencyUpdated(_frequency);\\n    }\\n\\n    function updateRewarder(IRewarder _rewarder) external onlyOwner {\\n        rewarder = _rewarder;\\n        emit RewarderUpdated(address(_rewarder));\\n    }\\n\\n    function updateMaxBet(uint256 _maxBet) external onlyOwner {\\n        maxBet = _maxBet;\\n        emit MaxBetUpdated(maxBet);\\n    }\\n\\n    function updateRevenueFee(uint256 _revenueFee) external onlyOwner {\\n        revenueFee = _revenueFee;\\n        emit RevenueFeeUpdated(_revenueFee);\\n    }\\n\\n    function updateRevenueAddress(address _revenueAddress) external onlyOwner {\\n        require(_revenueAddress != address(0), \\\"Fee address can't be 0\\\");\\n        revenueAddress = _revenueAddress;\\n        emit RevenueAddressUpdated(_revenueAddress);\\n    }\\n\\n    function updatePOLFee(uint256 _polFee) external onlyOwner {\\n        polFee = _polFee;\\n        emit POLFeeUpdated(_polFee);\\n    }\\n\\n    function updatePOLAddress(address _polAddress) external onlyOwner {\\n        require(_polAddress != address(0), \\\"Fee address can't be 0\\\");\\n        polAddress = _polAddress;\\n        emit POLAddressUpdated(_polAddress);\\n    }\\n\\n    /// @notice Return the amount of bets a user has made.\\n    function userBetCount(address user) public view returns (uint256) {\\n        return bet[user].length;\\n    }\\n\\n    function userRollBetCount(uint256 rollId, address user) public view returns (uint256) {\\n        return betsPerRoll[rollId][user].length;\\n    }\\n\\n    /// @notice returns a users bet with given id.\\n    function userBet(\\n        address user, uint256 betId\\n    ) external view returns (\\n        Bet memory\\n    ) {\\n        return bet[user][betId];\\n    }\\n\\n    function userRollBetId(address user, uint64 rollId, uint256 rollBetId) external view returns (uint256) {\\n        return betsPerRoll[rollId][user][rollBetId];\\n    }\\n\\n    function userRollBet(\\n        uint64 rollId, address user, uint256 betId\\n    ) external view returns (\\n        Bet memory\\n    ) {\\n        return bet[user][betsPerRoll[rollId][user][betId]];\\n    }\\n\\n\\t/// @notice The time of the next roll to take place.\\n\\tfunction nextRollId() external view returns (uint256) {\\n\\t\\treturn block.timestamp + (frequency - (block.timestamp % frequency));\\n\\t}\\n\\n    function currentRollId() external view returns (uint256) {\\n        return block.timestamp - (block.timestamp % frequency);\\n    }\\n\\n    function totalWagered(uint64 rollId) public view returns (uint256)  {\\n        Roll memory _roll = roll[rollId];\\n        return _roll.winWeights[0] +\\n            _roll.winWeights[1] +\\n            _roll.winWeights[2] +\\n            _roll.winWeights[3] +\\n            _roll.winWeights[4] +\\n            _roll.winWeights[5];\\n    }\\n\\n    /// @notice Get the current odds for a prediction.\\n    function odds(uint64 rollId, uint8 result) public view returns (uint256) {\\n        Roll memory _roll = roll[rollId];\\n        require(result < 6, \\\"Only win bet currently supported\\\");\\n        uint256 total = totalWagered(rollId);\\n        if (total == 0) return 0;\\n        return (_roll.winWeights[result] * 1e10) / total;\\n    }\\n\\n    function currentWeight(uint64 rollId) external view returns (uint256[6] memory) {\\n        return roll[rollId].winWeights;\\n    }\\n\\n    /// @notice Start the roll and request result from VRF.\\n    function startRoll(uint64 rollId) public {\\n        validateRollId(rollId);\\n        require(block.timestamp > rollId, \\\"Roll not finished\\\");\\n        Roll storage _roll = roll[rollId];\\n        require(_roll.requestId == 0, \\\"Result already requested\\\");\\n        require(_roll.result == 0, \\\"Roll result already fulfilled\\\");\\n\\t \\tuint256 s_requestId = randomProvider.requestRandomWords();\\n        _roll.requestId = s_requestId;\\n        requestIdRoll[s_requestId] = rollId;\\n        emit RollStart(\\n            rollId,\\n            totalWagered(rollId)\\n        );\\n    }\\n\\n    /// @notice Place a bet.\\n    function placeBet(\\n        uint64 rollId,\\n        uint8 prediction\\n    ) external payable returns (uint256 betId) {\\n\\n        require(rollId % frequency == 0, \\\"Invalid roll ID\\\");\\n\\n        Roll storage _roll = roll[rollId];\\n        require(_roll.requestId == 0, \\\"Roll finising\\\");\\n        require(prediction < 6, \\\"Only 6 faces of dice\\\");\\n\\n        if(block.timestamp > rollId) {\\n            require(totalWagered(rollId) != 0, \\\"Cannot finish a race with no bets\\\");\\n        }\\n\\n        uint256 _revenueFee = msg.value * revenueFee / 10000;\\n        uint256 _polFee = msg.value * polFee / 10000;\\n        uint256 betValue = msg.value - (_revenueFee + _polFee);\\n\\n        require(betValue <= maxBet, \\\"Bet above maxBet limit\\\");\\n\\n        // Create the bet.\\n        Bet memory _bet = Bet(betValue, msg.sender, rollId, prediction, false);\\n        bet[msg.sender].push(_bet);\\n        betId = bet[msg.sender].length - 1;\\n\\n        // Update the roll.\\n        _roll.winWeights[prediction] += betValue;\\n        betsPerRoll[rollId][msg.sender].push(betId);\\n\\n        emit Wagered(\\n            rollId,\\n            msg.sender,\\n            betValue,\\n            prediction,\\n            totalWagered(rollId)\\n        );\\n\\n        if (rollId < block.timestamp) {\\n            startRoll(rollId);\\n        }\\n        if (address(rewarder) != address(0)) {\\n            rewarder.addRewardAdjusted(msg.sender, msg.value, rollId);\\n        }\\n        (bool sent, ) = payable(polAddress).call{value: _polFee}(\\\"\\\");\\n        require(sent, \\\"POL Fee not sent\\\");\\n        (sent, ) = payable(revenueAddress).call{value: _revenueFee}(\\\"\\\");\\n        require(sent, \\\"Revenue Fee not sent\\\");\\n        return betId;\\n    }\\n\\n    function betsOnRoll(address user, uint64 rollId) external view returns (Bet[] memory) {\\n        uint256[] memory betIds = betsPerRoll[rollId][user];\\n        uint256 i;\\n        Bet[] memory result = new Bet[](betIds.length);\\n        for (i = 0; i < betIds.length; i++){\\n            result[i] = bet[user][betIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Cash out a winning bet.\\n    function payout(uint256 betId) external {\\n        Bet storage _bet = bet[msg.sender][betId];\\n        Roll storage _roll = roll[_bet.rollId];\\n        require(_roll.result != 0, \\\"Roll not finished\\\");\\n        require(!_bet.paid, \\\"Bet already paid\\\");\\n\\n        uint256 result = rollResult(_bet.rollId);\\n        if (_bet.prediction != result) {\\n            return;\\n        }\\n        uint256 _odds = odds(_bet.rollId, _bet.prediction);\\n        uint256 _payout = (_bet.amount * 1e10) / _odds;\\n        _bet.paid = true;\\n        emit Payout(\\n            _bet.rollId,\\n            msg.sender,\\n            _bet.amount,\\n            _bet.prediction,\\n            _payout\\n        );\\n        payable(msg.sender).transfer(_payout);\\n    }\\n\\n    /// @notice End the roll and set the result.\\n    function endRoll(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) external {\\n        require(msg.sender == address(randomProvider), \\\"Not Allowed randomProvider\\\");\\n        uint64 rollId = requestIdRoll[requestId];\\n        Roll storage _roll = roll[rollId];\\n        require(_roll.result == 0, \\\"Randomness already fulfilled\\\");\\n        _roll.result = randomWords[0];\\n        emit RollEnd(\\n            rollId,\\n            totalWagered(rollId),\\n            randomWords[0]\\n        );\\n    }\\n\\n    /// @notice Validate a `rollId` is valid to make a bet on.\\n    function validateRollId(uint64 rollId) internal view {\\n        // Need to validate roll length isn't finished\\n        require(rollId % frequency == 0, \\\"Invalid roll ID\\\");\\n        require(rollId >= start, \\\"Living in the past bro\\\");\\n        require(roll[rollId].result == 0, \\\"Roll finished\\\");\\n        require(requestIdRoll[rollId] == 0, \\\"Roll finising\\\");\\n    }\\n\\n    /// @notice Return the results for a roll.\\n    function rollResult(uint64 rollId) public view returns (uint256) {\\n        Roll memory _roll = roll[rollId];\\n        require(_roll.result != 0, \\\"Roll is not finished\\\");\\n\\n        uint256 i;\\n\\n        uint256 total;\\n        for (i = 0; i < 6; i++) {\\n            total += _roll.winWeights[i];\\n        }\\n\\n        uint256 result;\\n        uint256 number = _roll.result % total;\\n        for (i = 0; i < 6; i++) {\\n            if (_roll.winWeights[i] > number) {\\n                result = i;\\n                break;\\n            } else {\\n                number -= _roll.winWeights[i];\\n            }\\n        }\\n        return result;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x43d3eb904e12916f829ab9adfe65933319abf475a3f394ebe28029d5c405181c\",\"license\":\"Unlicense\"},\"contracts/interfaces/IRandomProvider.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IRandomProvider {\\n    function requestRandomWords() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x08ada06772773d82e709658d67470e4519bd9496b34307b05788836070bd97b0\",\"license\":\"Unlicense\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n\\ninterface IRewarder{\\n    function claim() external;\\n    function claimable(address userId) external view returns (uint256);\\n    function addReward(address userId, uint256 betAmount) external;\\n    function addRewardAdjusted(address user, uint256 betAmount, uint64 raceId) external;\\n}\\n\",\"keccak256\":\"0x6dde032cd66973e20c90902ddf0c0097adad34714976f65bd90acea520d2135b\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612e4f806100206000396000f3fe6080604052600436106102a05760003560e01c806397d147141161016e578063dcc3e06e116100cb578063f2fde38b1161007f578063f502925411610064578063f5029254146107a0578063f846cabc146107c0578063fdd288591461082357600080fd5b8063f2fde38b1461074a578063f408a23a1461076a57600080fd5b8063ea1e302d116100b0578063ea1e302d146106d6578063ead50da3146106e9578063ecc024381461072a57600080fd5b8063dcc3e06e14610696578063e1152343146106b657600080fd5b8063b410908d11610122578063be9a655511610107578063be9a655514610640578063cfb125cd14610656578063d613b60d1461067657600080fd5b8063b410908d14610600578063be8a83cb1461062057600080fd5b8063a55cd51c11610153578063a55cd51c146105a0578063a655f29e146105c0578063af3645c4146105e057600080fd5b806397d1471414610560578063a1aa2b5b1461058057600080fd5b806346b697fe1161021c5780636589a9e2116101d057806372b51dfa116101b557806372b51dfa146104e15780638da5cb5b1461050e5780638f46500e1461054057600080fd5b80636589a9e2146104ac578063715018a6146104cc57600080fd5b8063591378c411610201578063591378c41461042d57806361684d01146104765780636390e63b1461048c57600080fd5b806346b697fe146103ca578063561276341461040d57600080fd5b80632e5b21681161027357806338b5be4b1161025857806338b5be4b1461035d5780633969f8031461037d5780634195ab8e1461039d57600080fd5b80632e5b21681461033157806336e4ec641461034757600080fd5b8063164b4f62146102a5578063165f1125146102cd5780631b9632ac146102ef5780631d1472111461031c575b600080fd5b3480156102b157600080fd5b506102ba610843565b6040519081526020015b60405180910390f35b3480156102d957600080fd5b506102ed6102e8366004612a95565b610891565b005b3480156102fb57600080fd5b5061030f61030a366004612988565b6109fb565b6040516102c49190612be1565b34801561032857600080fd5b506102ba610be8565b34801561033d57600080fd5b506102ba606b5481565b34801561035357600080fd5b506102ba60675481565b34801561036957600080fd5b506102ed610378366004612b66565b610c13565b34801561038957600080fd5b506102ba610398366004612b66565b610e3c565b3480156103a957600080fd5b506103bd6103b83660046128e5565b610f08565b6040516102c49190612ca3565b3480156103d657600080fd5b506102ba6103e5366004612a2d565b60009182526070602090815260408084206001600160a01b0393909316845291905290205490565b34801561041957600080fd5b506102ba610428366004612a5d565b610fce565b34801561043957600080fd5b50610461610448366004612b66565b606d602052600090815260409020805460019091015482565b604080519283526020830191909152016102c4565b34801561048257600080fd5b506102ba60685481565b34801561049857600080fd5b506102ba6104a73660046129bd565b61100c565b3480156104b857600080fd5b506102ba6104c7366004612baf565b61105f565b3480156104d857600080fd5b506102ed611174565b3480156104ed57600080fd5b506105016104fc366004612b66565b6111da565b6040516102c49190612c72565b34801561051a57600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016102c4565b34801561054c57600080fd5b50606554610528906001600160a01b031681565b34801561056c57600080fd5b506102ed61057b3660046128c8565b611234565b34801561058c57600080fd5b506102ba61059b366004612b66565b6112d8565b3480156105ac57600080fd5b506102ed6105bb3660046129fb565b61146b565b3480156105cc57600080fd5b506102ed6105db3660046129fb565b611501565b3480156105ec57600080fd5b506102ed6105fb3660046128c8565b611590565b34801561060c57600080fd5b50606954610528906001600160a01b031681565b34801561062c57600080fd5b506102ed61063b366004612b66565b61168a565b34801561064c57600080fd5b506102ba60665481565b34801561066257600080fd5b50606a54610528906001600160a01b031681565b34801561068257600080fd5b506102ed6106913660046129fb565b611754565b3480156106a257600080fd5b50606c54610528906001600160a01b031681565b3480156106c257600080fd5b506102ed6106d13660046129fb565b6117e3565b6102ba6106e4366004612baf565b611a27565b3480156106f557600080fd5b5060655461071190600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102c4565b34801561073657600080fd5b506102ed610745366004612911565b61204e565b34801561075657600080fd5b506102ed6107653660046128c8565b61214b565b34801561077657600080fd5b506102ba6107853660046128c8565b6001600160a01b03166000908152606e602052604090205490565b3480156107ac57600080fd5b506103bd6107bb366004612b81565b61222d565b3480156107cc57600080fd5b506107e06107db3660046128e5565b61232e565b604080519586526001600160a01b03909416602086015267ffffffffffffffff9092169284019290925260ff90911660608301521515608082015260a0016102c4565b34801561082f57600080fd5b506102ed61083e3660046128c8565b61239a565b60655460009061086490600160a01b900467ffffffffffffffff1642612d71565b6065546108829190600160a01b900467ffffffffffffffff16612d3f565b61088c9042612cf4565b905090565b6065546001600160a01b031633146108f05760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420416c6c6f7765642072616e646f6d50726f766964657200000000000060448201526064015b60405180910390fd5b6000828152606f602090815260408083205467ffffffffffffffff16808452606d9092529091208054156109665760405162461bcd60e51b815260206004820152601c60248201527f52616e646f6d6e65737320616c72656164792066756c66696c6c65640000000060448201526064016108e7565b8260008151811061097957610979612dd8565b6020908102919091010151815567ffffffffffffffff82167f3f1673b2a61754bec64f37e8beeb0597773dcf48b3fa582f30c64878fdf1f6066109bb84610e3c565b856000815181106109ce576109ce612dd8565b60200260200101516040516109ed929190918252602082015260400190565b60405180910390a250505050565b67ffffffffffffffff811660009081526070602090815260408083206001600160a01b03861684528252808320805482518185028101850190935280835260609493830182828015610a6c57602002820191906000526020600020905b815481526020019060010190808311610a58575b50505050509050600080825167ffffffffffffffff811115610a9057610a90612dee565b604051908082528060200260200182016040528015610ae957816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181610aae5790505b509050600091505b8251821015610bdd576001600160a01b0386166000908152606e602052604090208351849084908110610b2657610b26612dd8565b602002602001015181548110610b3e57610b3e612dd8565b60009182526020918290206040805160a081018252600290930290910180548352600101546001600160a01b0381169383019390935267ffffffffffffffff600160a01b8404169082015260ff600160e01b830481166060830152600160e81b909204909116151560808201528151829084908110610bbf57610bbf612dd8565b60200260200101819052508180610bd590612d56565b925050610af1565b925050505b92915050565b606554600090610c0990600160a01b900467ffffffffffffffff1642612d71565b61088c9042612d3f565b610c1c81612494565b8067ffffffffffffffff164211610c755760405162461bcd60e51b815260206004820152601160248201527f526f6c6c206e6f742066696e697368656400000000000000000000000000000060448201526064016108e7565b67ffffffffffffffff81166000908152606d60205260409020600181015415610ce05760405162461bcd60e51b815260206004820152601860248201527f526573756c7420616c726561647920726571756573746564000000000000000060448201526064016108e7565b805415610d2f5760405162461bcd60e51b815260206004820152601d60248201527f526f6c6c20726573756c7420616c72656164792066756c66696c6c656400000060448201526064016108e7565b606554604080517fe0c8628900000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163e0c8628991600480830192602092919082900301818787803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc69190612a14565b600183018190556000818152606f60205260409020805467ffffffffffffffff191667ffffffffffffffff86169081179091559091507f6abbcac270a7e73b86c89e6e279a18fd9b2946513a3feecb3e960b07de1a20ec610e2685610e3c565b60405190815260200160405180910390a2505050565b67ffffffffffffffff81166000908152606d60209081526040808320815160608101835281548152600182015493810193909352815160c0810180845285949384019190600284019060069082845b815481526020019060010190808311610e8b575050509190925250505060408181015160a08101516080820151606083015193830151602084015193519596509194909392610ed991612cf4565b610ee39190612cf4565b610eed9190612cf4565b610ef79190612cf4565b610f019190612cf4565b9392505050565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b0386168252606e905291909120805483908110610f5957610f59612dd8565b60009182526020918290206040805160a081018252600290930290910180548352600101546001600160a01b0381169383019390935267ffffffffffffffff600160a01b8404169082015260ff600160e01b830481166060830152600160e81b90920490911615156080820152905092915050565b60706020528260005260406000206020528160005260406000208181548110610ff657600080fd5b9060005260206000200160009250925050505481565b67ffffffffffffffff821660009081526070602090815260408083206001600160a01b0387168452909152812080548390811061104b5761104b612dd8565b906000526020600020015490509392505050565b67ffffffffffffffff82166000908152606d60209081526040808320815160608101835281548152600182015493810193909352815160c0810180845285949384019190600284019060069082845b8154815260200190600101908083116110ae57505050505081525050905060068360ff161061111f5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792077696e206265742063757272656e746c7920737570706f7274656460448201526064016108e7565b600061112a85610e3c565b90508061113c57600092505050610be2565b8082604001518560ff166006811061115657611156612dd8565b602002015161116a906402540be400612d20565b610bdd9190612d0c565b6033546001600160a01b031633146111ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b6111d86000612625565b565b6111e2612892565b67ffffffffffffffff82166000908152606d602052604090819020815160c0810190925260020160068282826020028201915b8154815260200190600101908083116112155750505050509050919050565b6033546001600160a01b0316331461128e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b606c80546001600160a01b0319166001600160a01b0383169081179091556040517f47c9042c3be42a955f60f9b75006522826af1a3bed83e26646997d3bcccda77c90600090a250565b67ffffffffffffffff81166000908152606d60209081526040808320815160608101835281548152600182015493810193909352815160c0810180845285949384019190600284019060069082845b815481526020019060010190808311611327575050509190925250508151919250506113955760405162461bcd60e51b815260206004820152601460248201527f526f6c6c206973206e6f742066696e697368656400000000000000000000000060448201526064016108e7565b6000805b60068210156113db57826040015182600681106113b8576113b8612dd8565b60200201516113c79082612cf4565b9050816113d381612d56565b925050611399565b6000808285600001516113ee9190612d71565b9050600093505b600684101561146157808560400151856006811061141557611415612dd8565b6020020151111561142857839150611461565b8460400151846006811061143e5761143e612dd8565b602002015161144d9082612d3f565b90508361145981612d56565b9450506113f5565b5095945050505050565b6033546001600160a01b031633146114c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b606b8190556040518181527f2b47c83dfa951a422411b397c029d005c87d9fa8fe9f6d2bc2620c23e5e00312906020015b60405180910390a150565b6033546001600160a01b0316331461155b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b60678190556040518181527f14a368a696aca40efd280b31b2896f421c8a75eb772f8de1731eb220735395c6906020016114f6565b6033546001600160a01b031633146115ea5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b6001600160a01b0381166116405760405162461bcd60e51b815260206004820152601660248201527f46656520616464726573732063616e277420626520300000000000000000000060448201526064016108e7565b606a80546001600160a01b0319166001600160a01b0383169081179091556040517f5dc8a57b462a8fae72fded55639269f100cfd12e046986a8ef490d56d5edcbf790600090a250565b6033546001600160a01b031633146116e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b606580547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b67ffffffffffffffff8416908102919091179091556040519081527f9d881bc8bb4b3652ec48088bd8e605869a941e61786bf02750449ce34881bf56906020016114f6565b6033546001600160a01b031633146117ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b60688190556040518181527f9afc1b03107862b2aabd5adaf9bf3a6c054623803995901416d64d2ac86ed01d906020016114f6565b336000908152606e6020526040812080548390811061180457611804612dd8565b6000918252602080832060016002909302019182015467ffffffffffffffff600160a01b909104168352606d905260409091208054919250906118895760405162461bcd60e51b815260206004820152601160248201527f526f6c6c206e6f742066696e697368656400000000000000000000000000000060448201526064016108e7565b6001820154600160e81b900460ff16156118e55760405162461bcd60e51b815260206004820152601060248201527f42657420616c726561647920706169640000000000000000000000000000000060448201526064016108e7565b600182015460009061190790600160a01b900467ffffffffffffffff166112d8565b6001840154909150600160e01b900460ff1681146119255750505050565b600183015460009061195290600160a01b810467ffffffffffffffff1690600160e01b900460ff1661105f565b905060008185600001546402540be40061196c9190612d20565b6119769190612d0c565b600186018054600160e81b60ff60e81b19909116179081905586546040805191825260ff600160e01b840416602083015281018390529192503391600160a01b90910467ffffffffffffffff16907ff4580f306b5592ada5d2370389f5afc4e6abbd1783abb1d65443df7d28be8c819060600160405180910390a3604051339082156108fc029083906000818181858888f19350505050158015611a1e573d6000803e3d6000fd5b50505050505050565b606554600090611a4890600160a01b900467ffffffffffffffff1684612d85565b67ffffffffffffffff1615611a9f5760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420726f6c6c204944000000000000000000000000000000000060448201526064016108e7565b67ffffffffffffffff83166000908152606d60205260409020600181015415611afa5760405162461bcd60e51b815260206004820152600d60248201526c526f6c6c2066696e6973696e6760981b60448201526064016108e7565b60068360ff1610611b4d5760405162461bcd60e51b815260206004820152601460248201527f4f6e6c792036206661636573206f66206469636500000000000000000000000060448201526064016108e7565b8367ffffffffffffffff16421115611bda57611b6884610e3c565b611bda5760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f742066696e697368206120726163652077697468206e6f2062657460448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016108e7565b600061271060675434611bed9190612d20565b611bf79190612d0c565b9050600061271060685434611c0c9190612d20565b611c169190612d0c565b90506000611c248284612cf4565b611c2e9034612d3f565b9050606b54811115611c825760405162461bcd60e51b815260206004820152601660248201527f4265742061626f7665206d6178426574206c696d69740000000000000000000060448201526064016108e7565b6040805160a08101825282815233602080830182815267ffffffffffffffff808d1685870190815260ff808e1660608801908152600060808901818152888252606e88529981208054600181810183558284529883208b5160029092020190815596519688018054955193519b511515600160e81b0260ff60e81b199c909516600160e01b029b909b167fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909616600160a01b027fffffffff000000000000000000000000000000000000000000000000000000009095166001600160a01b0397909716969096179390931716929092179190911790955591909352549091611d8b91612d3f565b955081856002018860ff1660068110611da657611da6612dd8565b016000828254611db69190612cf4565b909155505067ffffffffffffffff881660008181526070602090815260408083203380855290835290832080546001810182559084529190922001889055907f4ca8370402b96db401bce3c1e5c223107a1184f0e382b37d73b5f3f3766b6a48848a611e218d610e3c565b6040805193845260ff90921660208401529082015260600160405180910390a3428867ffffffffffffffff161015611e5c57611e5c88610c13565b606c546001600160a01b031615611efa57606c546040517f51f39e0600000000000000000000000000000000000000000000000000000000815233600482015234602482015267ffffffffffffffff8a1660448201526001600160a01b03909116906351f39e0690606401600060405180830381600087803b158015611ee157600080fd5b505af1158015611ef5573d6000803e3d6000fd5b505050505b606a546040516000916001600160a01b03169085908381818185875af1925050503d8060008114611f47576040519150601f19603f3d011682016040523d82523d6000602084013e611f4c565b606091505b5050905080611f9d5760405162461bcd60e51b815260206004820152601060248201527f504f4c20466565206e6f742073656e740000000000000000000000000000000060448201526064016108e7565b6069546040516001600160a01b03909116908690600081818185875af1925050503d8060008114611fea576040519150601f19603f3d011682016040523d82523d6000602084013e611fef565b606091505b505080915050806120425760405162461bcd60e51b815260206004820152601460248201527f526576656e756520466565206e6f742073656e7400000000000000000000000060448201526064016108e7565b50505050505092915050565b600061205a6001612677565b90508015612072576000805461ff0019166101001790555b426066556065805460678990556068889055606980546001600160a01b038981166001600160a01b031992831617909255606a80548984169216919091179055606b86905567ffffffffffffffff8516600160a01b027fffffffff00000000000000000000000000000000000000000000000000000000909216908b16171790556120fb6127b0565b8015612141576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6033546001600160a01b031633146121a55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b6001600160a01b0381166122215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108e7565b61222a81612625565b50565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b038616808352606e825284832067ffffffffffffffff8916845260708352858420918452915292902080549192918490811061229d5761229d612dd8565b9060005260206000200154815481106122b8576122b8612dd8565b60009182526020918290206040805160a081018252600290930290910180548352600101546001600160a01b0381169383019390935267ffffffffffffffff600160a01b8404169082015260ff600160e01b830481166060830152600160e81b9092049091161515608082015290509392505050565b606e602052816000526040600020818154811061234a57600080fd5b6000918252602090912060029091020180546001909101549092506001600160a01b038116915067ffffffffffffffff600160a01b8204169060ff600160e01b8204811691600160e81b90041685565b6033546001600160a01b031633146123f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b6001600160a01b03811661244a5760405162461bcd60e51b815260206004820152601660248201527f46656520616464726573732063616e277420626520300000000000000000000060448201526064016108e7565b606980546001600160a01b0319166001600160a01b0383169081179091556040517f12c87c4c1bec313f335ef0060b241de51ec549e8c57a25aae98da2ad10837cde90600090a250565b6065546124b290600160a01b900467ffffffffffffffff1682612d85565b67ffffffffffffffff16156125095760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420726f6c6c204944000000000000000000000000000000000060448201526064016108e7565b6066548167ffffffffffffffff1610156125655760405162461bcd60e51b815260206004820152601660248201527f4c6976696e6720696e2074686520706173742062726f0000000000000000000060448201526064016108e7565b67ffffffffffffffff81166000908152606d6020526040902054156125cc5760405162461bcd60e51b815260206004820152600d60248201527f526f6c6c2066696e69736865640000000000000000000000000000000000000060448201526064016108e7565b67ffffffffffffffff8082166000908152606f6020526040902054161561222a5760405162461bcd60e51b815260206004820152600d60248201526c526f6c6c2066696e6973696e6760981b60448201526064016108e7565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615612714578160ff16600114801561269a5750303b155b61270c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108e7565b506000919050565b60005460ff8084169116106127915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108e7565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff1661281b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108e7565b6111d8600054610100900460ff166128895760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108e7565b6111d833612625565b6040518060c001604052806006906020820280368337509192915050565b803567ffffffffffffffff811681146127ab57600080fd5b6000602082840312156128da57600080fd5b8135610f0181612e04565b600080604083850312156128f857600080fd5b823561290381612e04565b946020939093013593505050565b600080600080600080600060e0888a03121561292c57600080fd5b873561293781612e04565b96506020880135955060408801359450606088013561295581612e04565b9350608088013561296581612e04565b925060a0880135915061297a60c089016128b0565b905092959891949750929550565b6000806040838503121561299b57600080fd5b82356129a681612e04565b91506129b4602084016128b0565b90509250929050565b6000806000606084860312156129d257600080fd5b83356129dd81612e04565b92506129eb602085016128b0565b9150604084013590509250925092565b600060208284031215612a0d57600080fd5b5035919050565b600060208284031215612a2657600080fd5b5051919050565b60008060408385031215612a4057600080fd5b823591506020830135612a5281612e04565b809150509250929050565b600080600060608486031215612a7257600080fd5b833592506020840135612a8481612e04565b929592945050506040919091013590565b60008060408385031215612aa857600080fd5b8235915060208084013567ffffffffffffffff80821115612ac857600080fd5b818601915086601f830112612adc57600080fd5b813581811115612aee57612aee612dee565b8060051b604051601f19603f83011681018181108582111715612b1357612b13612dee565b604052828152858101935084860182860187018b1015612b3257600080fd5b600095505b83861015612b55578035855260019590950194938601938601612b37565b508096505050505050509250929050565b600060208284031215612b7857600080fd5b610f01826128b0565b600080600060608486031215612b9657600080fd5b612b9f846128b0565b92506020840135612a8481612e04565b60008060408385031215612bc257600080fd5b612bcb836128b0565b9150602083013560ff81168114612a5257600080fd5b6020808252825182820181905260009190848201906040850190845b81811015612c6657612c53838551805182526001600160a01b03602082015116602083015267ffffffffffffffff604082015116604083015260ff60608201511660608301526080810151151560808301525050565b9284019260a09290920191600101612bfd565b50909695505050505050565b60c08101818360005b6006811015612c9a578151835260209283019290910190600101612c7b565b50505092915050565b60a08101610be28284805182526001600160a01b03602082015116602083015267ffffffffffffffff604082015116604083015260ff60608201511660608301526080810151151560808301525050565b60008219821115612d0757612d07612dac565b500190565b600082612d1b57612d1b612dc2565b500490565b6000816000190483118215151615612d3a57612d3a612dac565b500290565b600082821015612d5157612d51612dac565b500390565b6000600019821415612d6a57612d6a612dac565b5060010190565b600082612d8057612d80612dc2565b500690565b600067ffffffffffffffff80841680612da057612da0612dc2565b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461222a57600080fdfea2646970667358221220cd47836ef9874a3b1ab050b66ea82ba4641c7245f1d7bbd248c2261177c4cf6464736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106102a05760003560e01c806397d147141161016e578063dcc3e06e116100cb578063f2fde38b1161007f578063f502925411610064578063f5029254146107a0578063f846cabc146107c0578063fdd288591461082357600080fd5b8063f2fde38b1461074a578063f408a23a1461076a57600080fd5b8063ea1e302d116100b0578063ea1e302d146106d6578063ead50da3146106e9578063ecc024381461072a57600080fd5b8063dcc3e06e14610696578063e1152343146106b657600080fd5b8063b410908d11610122578063be9a655511610107578063be9a655514610640578063cfb125cd14610656578063d613b60d1461067657600080fd5b8063b410908d14610600578063be8a83cb1461062057600080fd5b8063a55cd51c11610153578063a55cd51c146105a0578063a655f29e146105c0578063af3645c4146105e057600080fd5b806397d1471414610560578063a1aa2b5b1461058057600080fd5b806346b697fe1161021c5780636589a9e2116101d057806372b51dfa116101b557806372b51dfa146104e15780638da5cb5b1461050e5780638f46500e1461054057600080fd5b80636589a9e2146104ac578063715018a6146104cc57600080fd5b8063591378c411610201578063591378c41461042d57806361684d01146104765780636390e63b1461048c57600080fd5b806346b697fe146103ca578063561276341461040d57600080fd5b80632e5b21681161027357806338b5be4b1161025857806338b5be4b1461035d5780633969f8031461037d5780634195ab8e1461039d57600080fd5b80632e5b21681461033157806336e4ec641461034757600080fd5b8063164b4f62146102a5578063165f1125146102cd5780631b9632ac146102ef5780631d1472111461031c575b600080fd5b3480156102b157600080fd5b506102ba610843565b6040519081526020015b60405180910390f35b3480156102d957600080fd5b506102ed6102e8366004612a95565b610891565b005b3480156102fb57600080fd5b5061030f61030a366004612988565b6109fb565b6040516102c49190612be1565b34801561032857600080fd5b506102ba610be8565b34801561033d57600080fd5b506102ba606b5481565b34801561035357600080fd5b506102ba60675481565b34801561036957600080fd5b506102ed610378366004612b66565b610c13565b34801561038957600080fd5b506102ba610398366004612b66565b610e3c565b3480156103a957600080fd5b506103bd6103b83660046128e5565b610f08565b6040516102c49190612ca3565b3480156103d657600080fd5b506102ba6103e5366004612a2d565b60009182526070602090815260408084206001600160a01b0393909316845291905290205490565b34801561041957600080fd5b506102ba610428366004612a5d565b610fce565b34801561043957600080fd5b50610461610448366004612b66565b606d602052600090815260409020805460019091015482565b604080519283526020830191909152016102c4565b34801561048257600080fd5b506102ba60685481565b34801561049857600080fd5b506102ba6104a73660046129bd565b61100c565b3480156104b857600080fd5b506102ba6104c7366004612baf565b61105f565b3480156104d857600080fd5b506102ed611174565b3480156104ed57600080fd5b506105016104fc366004612b66565b6111da565b6040516102c49190612c72565b34801561051a57600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016102c4565b34801561054c57600080fd5b50606554610528906001600160a01b031681565b34801561056c57600080fd5b506102ed61057b3660046128c8565b611234565b34801561058c57600080fd5b506102ba61059b366004612b66565b6112d8565b3480156105ac57600080fd5b506102ed6105bb3660046129fb565b61146b565b3480156105cc57600080fd5b506102ed6105db3660046129fb565b611501565b3480156105ec57600080fd5b506102ed6105fb3660046128c8565b611590565b34801561060c57600080fd5b50606954610528906001600160a01b031681565b34801561062c57600080fd5b506102ed61063b366004612b66565b61168a565b34801561064c57600080fd5b506102ba60665481565b34801561066257600080fd5b50606a54610528906001600160a01b031681565b34801561068257600080fd5b506102ed6106913660046129fb565b611754565b3480156106a257600080fd5b50606c54610528906001600160a01b031681565b3480156106c257600080fd5b506102ed6106d13660046129fb565b6117e3565b6102ba6106e4366004612baf565b611a27565b3480156106f557600080fd5b5060655461071190600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102c4565b34801561073657600080fd5b506102ed610745366004612911565b61204e565b34801561075657600080fd5b506102ed6107653660046128c8565b61214b565b34801561077657600080fd5b506102ba6107853660046128c8565b6001600160a01b03166000908152606e602052604090205490565b3480156107ac57600080fd5b506103bd6107bb366004612b81565b61222d565b3480156107cc57600080fd5b506107e06107db3660046128e5565b61232e565b604080519586526001600160a01b03909416602086015267ffffffffffffffff9092169284019290925260ff90911660608301521515608082015260a0016102c4565b34801561082f57600080fd5b506102ed61083e3660046128c8565b61239a565b60655460009061086490600160a01b900467ffffffffffffffff1642612d71565b6065546108829190600160a01b900467ffffffffffffffff16612d3f565b61088c9042612cf4565b905090565b6065546001600160a01b031633146108f05760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420416c6c6f7765642072616e646f6d50726f766964657200000000000060448201526064015b60405180910390fd5b6000828152606f602090815260408083205467ffffffffffffffff16808452606d9092529091208054156109665760405162461bcd60e51b815260206004820152601c60248201527f52616e646f6d6e65737320616c72656164792066756c66696c6c65640000000060448201526064016108e7565b8260008151811061097957610979612dd8565b6020908102919091010151815567ffffffffffffffff82167f3f1673b2a61754bec64f37e8beeb0597773dcf48b3fa582f30c64878fdf1f6066109bb84610e3c565b856000815181106109ce576109ce612dd8565b60200260200101516040516109ed929190918252602082015260400190565b60405180910390a250505050565b67ffffffffffffffff811660009081526070602090815260408083206001600160a01b03861684528252808320805482518185028101850190935280835260609493830182828015610a6c57602002820191906000526020600020905b815481526020019060010190808311610a58575b50505050509050600080825167ffffffffffffffff811115610a9057610a90612dee565b604051908082528060200260200182016040528015610ae957816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181610aae5790505b509050600091505b8251821015610bdd576001600160a01b0386166000908152606e602052604090208351849084908110610b2657610b26612dd8565b602002602001015181548110610b3e57610b3e612dd8565b60009182526020918290206040805160a081018252600290930290910180548352600101546001600160a01b0381169383019390935267ffffffffffffffff600160a01b8404169082015260ff600160e01b830481166060830152600160e81b909204909116151560808201528151829084908110610bbf57610bbf612dd8565b60200260200101819052508180610bd590612d56565b925050610af1565b925050505b92915050565b606554600090610c0990600160a01b900467ffffffffffffffff1642612d71565b61088c9042612d3f565b610c1c81612494565b8067ffffffffffffffff164211610c755760405162461bcd60e51b815260206004820152601160248201527f526f6c6c206e6f742066696e697368656400000000000000000000000000000060448201526064016108e7565b67ffffffffffffffff81166000908152606d60205260409020600181015415610ce05760405162461bcd60e51b815260206004820152601860248201527f526573756c7420616c726561647920726571756573746564000000000000000060448201526064016108e7565b805415610d2f5760405162461bcd60e51b815260206004820152601d60248201527f526f6c6c20726573756c7420616c72656164792066756c66696c6c656400000060448201526064016108e7565b606554604080517fe0c8628900000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163e0c8628991600480830192602092919082900301818787803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc69190612a14565b600183018190556000818152606f60205260409020805467ffffffffffffffff191667ffffffffffffffff86169081179091559091507f6abbcac270a7e73b86c89e6e279a18fd9b2946513a3feecb3e960b07de1a20ec610e2685610e3c565b60405190815260200160405180910390a2505050565b67ffffffffffffffff81166000908152606d60209081526040808320815160608101835281548152600182015493810193909352815160c0810180845285949384019190600284019060069082845b815481526020019060010190808311610e8b575050509190925250505060408181015160a08101516080820151606083015193830151602084015193519596509194909392610ed991612cf4565b610ee39190612cf4565b610eed9190612cf4565b610ef79190612cf4565b610f019190612cf4565b9392505050565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b0386168252606e905291909120805483908110610f5957610f59612dd8565b60009182526020918290206040805160a081018252600290930290910180548352600101546001600160a01b0381169383019390935267ffffffffffffffff600160a01b8404169082015260ff600160e01b830481166060830152600160e81b90920490911615156080820152905092915050565b60706020528260005260406000206020528160005260406000208181548110610ff657600080fd5b9060005260206000200160009250925050505481565b67ffffffffffffffff821660009081526070602090815260408083206001600160a01b0387168452909152812080548390811061104b5761104b612dd8565b906000526020600020015490509392505050565b67ffffffffffffffff82166000908152606d60209081526040808320815160608101835281548152600182015493810193909352815160c0810180845285949384019190600284019060069082845b8154815260200190600101908083116110ae57505050505081525050905060068360ff161061111f5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792077696e206265742063757272656e746c7920737570706f7274656460448201526064016108e7565b600061112a85610e3c565b90508061113c57600092505050610be2565b8082604001518560ff166006811061115657611156612dd8565b602002015161116a906402540be400612d20565b610bdd9190612d0c565b6033546001600160a01b031633146111ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b6111d86000612625565b565b6111e2612892565b67ffffffffffffffff82166000908152606d602052604090819020815160c0810190925260020160068282826020028201915b8154815260200190600101908083116112155750505050509050919050565b6033546001600160a01b0316331461128e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b606c80546001600160a01b0319166001600160a01b0383169081179091556040517f47c9042c3be42a955f60f9b75006522826af1a3bed83e26646997d3bcccda77c90600090a250565b67ffffffffffffffff81166000908152606d60209081526040808320815160608101835281548152600182015493810193909352815160c0810180845285949384019190600284019060069082845b815481526020019060010190808311611327575050509190925250508151919250506113955760405162461bcd60e51b815260206004820152601460248201527f526f6c6c206973206e6f742066696e697368656400000000000000000000000060448201526064016108e7565b6000805b60068210156113db57826040015182600681106113b8576113b8612dd8565b60200201516113c79082612cf4565b9050816113d381612d56565b925050611399565b6000808285600001516113ee9190612d71565b9050600093505b600684101561146157808560400151856006811061141557611415612dd8565b6020020151111561142857839150611461565b8460400151846006811061143e5761143e612dd8565b602002015161144d9082612d3f565b90508361145981612d56565b9450506113f5565b5095945050505050565b6033546001600160a01b031633146114c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b606b8190556040518181527f2b47c83dfa951a422411b397c029d005c87d9fa8fe9f6d2bc2620c23e5e00312906020015b60405180910390a150565b6033546001600160a01b0316331461155b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b60678190556040518181527f14a368a696aca40efd280b31b2896f421c8a75eb772f8de1731eb220735395c6906020016114f6565b6033546001600160a01b031633146115ea5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b6001600160a01b0381166116405760405162461bcd60e51b815260206004820152601660248201527f46656520616464726573732063616e277420626520300000000000000000000060448201526064016108e7565b606a80546001600160a01b0319166001600160a01b0383169081179091556040517f5dc8a57b462a8fae72fded55639269f100cfd12e046986a8ef490d56d5edcbf790600090a250565b6033546001600160a01b031633146116e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b606580547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b67ffffffffffffffff8416908102919091179091556040519081527f9d881bc8bb4b3652ec48088bd8e605869a941e61786bf02750449ce34881bf56906020016114f6565b6033546001600160a01b031633146117ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b60688190556040518181527f9afc1b03107862b2aabd5adaf9bf3a6c054623803995901416d64d2ac86ed01d906020016114f6565b336000908152606e6020526040812080548390811061180457611804612dd8565b6000918252602080832060016002909302019182015467ffffffffffffffff600160a01b909104168352606d905260409091208054919250906118895760405162461bcd60e51b815260206004820152601160248201527f526f6c6c206e6f742066696e697368656400000000000000000000000000000060448201526064016108e7565b6001820154600160e81b900460ff16156118e55760405162461bcd60e51b815260206004820152601060248201527f42657420616c726561647920706169640000000000000000000000000000000060448201526064016108e7565b600182015460009061190790600160a01b900467ffffffffffffffff166112d8565b6001840154909150600160e01b900460ff1681146119255750505050565b600183015460009061195290600160a01b810467ffffffffffffffff1690600160e01b900460ff1661105f565b905060008185600001546402540be40061196c9190612d20565b6119769190612d0c565b600186018054600160e81b60ff60e81b19909116179081905586546040805191825260ff600160e01b840416602083015281018390529192503391600160a01b90910467ffffffffffffffff16907ff4580f306b5592ada5d2370389f5afc4e6abbd1783abb1d65443df7d28be8c819060600160405180910390a3604051339082156108fc029083906000818181858888f19350505050158015611a1e573d6000803e3d6000fd5b50505050505050565b606554600090611a4890600160a01b900467ffffffffffffffff1684612d85565b67ffffffffffffffff1615611a9f5760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420726f6c6c204944000000000000000000000000000000000060448201526064016108e7565b67ffffffffffffffff83166000908152606d60205260409020600181015415611afa5760405162461bcd60e51b815260206004820152600d60248201526c526f6c6c2066696e6973696e6760981b60448201526064016108e7565b60068360ff1610611b4d5760405162461bcd60e51b815260206004820152601460248201527f4f6e6c792036206661636573206f66206469636500000000000000000000000060448201526064016108e7565b8367ffffffffffffffff16421115611bda57611b6884610e3c565b611bda5760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f742066696e697368206120726163652077697468206e6f2062657460448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016108e7565b600061271060675434611bed9190612d20565b611bf79190612d0c565b9050600061271060685434611c0c9190612d20565b611c169190612d0c565b90506000611c248284612cf4565b611c2e9034612d3f565b9050606b54811115611c825760405162461bcd60e51b815260206004820152601660248201527f4265742061626f7665206d6178426574206c696d69740000000000000000000060448201526064016108e7565b6040805160a08101825282815233602080830182815267ffffffffffffffff808d1685870190815260ff808e1660608801908152600060808901818152888252606e88529981208054600181810183558284529883208b5160029092020190815596519688018054955193519b511515600160e81b0260ff60e81b199c909516600160e01b029b909b167fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909616600160a01b027fffffffff000000000000000000000000000000000000000000000000000000009095166001600160a01b0397909716969096179390931716929092179190911790955591909352549091611d8b91612d3f565b955081856002018860ff1660068110611da657611da6612dd8565b016000828254611db69190612cf4565b909155505067ffffffffffffffff881660008181526070602090815260408083203380855290835290832080546001810182559084529190922001889055907f4ca8370402b96db401bce3c1e5c223107a1184f0e382b37d73b5f3f3766b6a48848a611e218d610e3c565b6040805193845260ff90921660208401529082015260600160405180910390a3428867ffffffffffffffff161015611e5c57611e5c88610c13565b606c546001600160a01b031615611efa57606c546040517f51f39e0600000000000000000000000000000000000000000000000000000000815233600482015234602482015267ffffffffffffffff8a1660448201526001600160a01b03909116906351f39e0690606401600060405180830381600087803b158015611ee157600080fd5b505af1158015611ef5573d6000803e3d6000fd5b505050505b606a546040516000916001600160a01b03169085908381818185875af1925050503d8060008114611f47576040519150601f19603f3d011682016040523d82523d6000602084013e611f4c565b606091505b5050905080611f9d5760405162461bcd60e51b815260206004820152601060248201527f504f4c20466565206e6f742073656e740000000000000000000000000000000060448201526064016108e7565b6069546040516001600160a01b03909116908690600081818185875af1925050503d8060008114611fea576040519150601f19603f3d011682016040523d82523d6000602084013e611fef565b606091505b505080915050806120425760405162461bcd60e51b815260206004820152601460248201527f526576656e756520466565206e6f742073656e7400000000000000000000000060448201526064016108e7565b50505050505092915050565b600061205a6001612677565b90508015612072576000805461ff0019166101001790555b426066556065805460678990556068889055606980546001600160a01b038981166001600160a01b031992831617909255606a80548984169216919091179055606b86905567ffffffffffffffff8516600160a01b027fffffffff00000000000000000000000000000000000000000000000000000000909216908b16171790556120fb6127b0565b8015612141576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6033546001600160a01b031633146121a55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b6001600160a01b0381166122215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016108e7565b61222a81612625565b50565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b038616808352606e825284832067ffffffffffffffff8916845260708352858420918452915292902080549192918490811061229d5761229d612dd8565b9060005260206000200154815481106122b8576122b8612dd8565b60009182526020918290206040805160a081018252600290930290910180548352600101546001600160a01b0381169383019390935267ffffffffffffffff600160a01b8404169082015260ff600160e01b830481166060830152600160e81b9092049091161515608082015290509392505050565b606e602052816000526040600020818154811061234a57600080fd5b6000918252602090912060029091020180546001909101549092506001600160a01b038116915067ffffffffffffffff600160a01b8204169060ff600160e01b8204811691600160e81b90041685565b6033546001600160a01b031633146123f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108e7565b6001600160a01b03811661244a5760405162461bcd60e51b815260206004820152601660248201527f46656520616464726573732063616e277420626520300000000000000000000060448201526064016108e7565b606980546001600160a01b0319166001600160a01b0383169081179091556040517f12c87c4c1bec313f335ef0060b241de51ec549e8c57a25aae98da2ad10837cde90600090a250565b6065546124b290600160a01b900467ffffffffffffffff1682612d85565b67ffffffffffffffff16156125095760405162461bcd60e51b815260206004820152600f60248201527f496e76616c696420726f6c6c204944000000000000000000000000000000000060448201526064016108e7565b6066548167ffffffffffffffff1610156125655760405162461bcd60e51b815260206004820152601660248201527f4c6976696e6720696e2074686520706173742062726f0000000000000000000060448201526064016108e7565b67ffffffffffffffff81166000908152606d6020526040902054156125cc5760405162461bcd60e51b815260206004820152600d60248201527f526f6c6c2066696e69736865640000000000000000000000000000000000000060448201526064016108e7565b67ffffffffffffffff8082166000908152606f6020526040902054161561222a5760405162461bcd60e51b815260206004820152600d60248201526c526f6c6c2066696e6973696e6760981b60448201526064016108e7565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615612714578160ff16600114801561269a5750303b155b61270c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108e7565b506000919050565b60005460ff8084169116106127915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108e7565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff1661281b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108e7565b6111d8600054610100900460ff166128895760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108e7565b6111d833612625565b6040518060c001604052806006906020820280368337509192915050565b803567ffffffffffffffff811681146127ab57600080fd5b6000602082840312156128da57600080fd5b8135610f0181612e04565b600080604083850312156128f857600080fd5b823561290381612e04565b946020939093013593505050565b600080600080600080600060e0888a03121561292c57600080fd5b873561293781612e04565b96506020880135955060408801359450606088013561295581612e04565b9350608088013561296581612e04565b925060a0880135915061297a60c089016128b0565b905092959891949750929550565b6000806040838503121561299b57600080fd5b82356129a681612e04565b91506129b4602084016128b0565b90509250929050565b6000806000606084860312156129d257600080fd5b83356129dd81612e04565b92506129eb602085016128b0565b9150604084013590509250925092565b600060208284031215612a0d57600080fd5b5035919050565b600060208284031215612a2657600080fd5b5051919050565b60008060408385031215612a4057600080fd5b823591506020830135612a5281612e04565b809150509250929050565b600080600060608486031215612a7257600080fd5b833592506020840135612a8481612e04565b929592945050506040919091013590565b60008060408385031215612aa857600080fd5b8235915060208084013567ffffffffffffffff80821115612ac857600080fd5b818601915086601f830112612adc57600080fd5b813581811115612aee57612aee612dee565b8060051b604051601f19603f83011681018181108582111715612b1357612b13612dee565b604052828152858101935084860182860187018b1015612b3257600080fd5b600095505b83861015612b55578035855260019590950194938601938601612b37565b508096505050505050509250929050565b600060208284031215612b7857600080fd5b610f01826128b0565b600080600060608486031215612b9657600080fd5b612b9f846128b0565b92506020840135612a8481612e04565b60008060408385031215612bc257600080fd5b612bcb836128b0565b9150602083013560ff81168114612a5257600080fd5b6020808252825182820181905260009190848201906040850190845b81811015612c6657612c53838551805182526001600160a01b03602082015116602083015267ffffffffffffffff604082015116604083015260ff60608201511660608301526080810151151560808301525050565b9284019260a09290920191600101612bfd565b50909695505050505050565b60c08101818360005b6006811015612c9a578151835260209283019290910190600101612c7b565b50505092915050565b60a08101610be28284805182526001600160a01b03602082015116602083015267ffffffffffffffff604082015116604083015260ff60608201511660608301526080810151151560808301525050565b60008219821115612d0757612d07612dac565b500190565b600082612d1b57612d1b612dc2565b500490565b6000816000190483118215151615612d3a57612d3a612dac565b500290565b600082821015612d5157612d51612dac565b500390565b6000600019821415612d6a57612d6a612dac565b5060010190565b600082612d8057612d80612dc2565b500690565b600067ffffffffffffffff80841680612da057612da0612dc2565b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461222a57600080fdfea2646970667358221220cd47836ef9874a3b1ab050b66ea82ba4641c7245f1d7bbd248c2261177c4cf6464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "An betting game with exotic bet types",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Payout(uint64,address,uint256,uint8,uint256)": {
        "notice": "emitted when a bet is cashed out."
      },
      "RollEnd(uint64,uint256,uint256)": {
        "notice": "emitted when a roll ends."
      },
      "RollStart(uint64,uint256)": {
        "notice": "emitted when a roll starts."
      },
      "Wagered(uint64,address,uint256,uint8,uint256)": {
        "notice": "emitted when a new bet is placed on a role."
      }
    },
    "kind": "user",
    "methods": {
      "bet(address,uint256)": {
        "notice": "mapping of address to list of bets."
      },
      "endRoll(uint256,uint256[])": {
        "notice": "End the roll and set the result."
      },
      "frequency()": {
        "notice": "How often rolls take place."
      },
      "nextRollId()": {
        "notice": "The time of the next roll to take place."
      },
      "odds(uint64,uint8)": {
        "notice": "Get the current odds for a prediction."
      },
      "payout(uint256)": {
        "notice": "Cash out a winning bet."
      },
      "placeBet(uint64,uint8)": {
        "notice": "Place a bet."
      },
      "revenueFee()": {
        "notice": "Fee paramaters."
      },
      "roll(uint64)": {
        "notice": "The state for each roll."
      },
      "rollResult(uint64)": {
        "notice": "Return the results for a roll."
      },
      "start()": {
        "notice": "The datetime of the first roll."
      },
      "startRoll(uint64)": {
        "notice": "Start the roll and request result from VRF."
      },
      "userBet(address,uint256)": {
        "notice": "returns a users bet with given id."
      },
      "userBetCount(address)": {
        "notice": "Return the amount of bets a user has made."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 277,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 280,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 774,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 157,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 269,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3530,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "randomProvider",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IRandomProvider)6387"
      },
      {
        "astId": 3533,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "frequency",
        "offset": 20,
        "slot": "101",
        "type": "t_uint64"
      },
      {
        "astId": 3536,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "start",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 3539,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "revenueFee",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 3541,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "polFee",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 3543,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "revenueAddress",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 3545,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "polAddress",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 3547,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "maxBet",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 3550,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "rewarder",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IRewarder)6416"
      },
      {
        "astId": 3576,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "roll",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_uint64,t_struct(Roll)3570_storage)"
      },
      {
        "astId": 3583,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "bet",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_array(t_struct(Bet)3561_storage)dyn_storage)"
      },
      {
        "astId": 3588,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "requestIdRoll",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_uint256,t_uint64)"
      },
      {
        "astId": 3595,
        "contract": "contracts/Exotic.sol:Exotic",
        "label": "betsPerRoll",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bet)3561_storage)dyn_storage": {
        "base": "t_struct(Bet)3561_storage",
        "encoding": "dynamic_array",
        "label": "struct Exotic.Bet[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)6_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[6]",
        "numberOfBytes": "192"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRandomProvider)6387": {
        "encoding": "inplace",
        "label": "contract IRandomProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)6416": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Bet)3561_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Exotic.Bet[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Bet)3561_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint64,t_struct(Roll)3570_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct Exotic.Roll)",
        "numberOfBytes": "32",
        "value": "t_struct(Roll)3570_storage"
      },
      "t_struct(Bet)3561_storage": {
        "encoding": "inplace",
        "label": "struct Exotic.Bet",
        "members": [
          {
            "astId": 3552,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3554,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "account",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3556,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "rollId",
            "offset": 20,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 3558,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "prediction",
            "offset": 28,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 3560,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "paid",
            "offset": 29,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Roll)3570_storage": {
        "encoding": "inplace",
        "label": "struct Exotic.Roll",
        "members": [
          {
            "astId": 3563,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "result",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3565,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "requestId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3569,
            "contract": "contracts/Exotic.sol:Exotic",
            "label": "winWeights",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)6_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}