{
  "address": "0x57bc13DE8F8c1252e44eF65039A1A36D42D57994",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        }
      ],
      "name": "decimalOdds",
      "outputs": [
        {
          "internalType": "uint256[6]",
          "name": "",
          "type": "uint256[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        }
      ],
      "name": "estimateOdds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exotic",
      "outputs": [
        {
          "internalType": "contract IExotic",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IExotic",
          "name": "_exotic",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        }
      ],
      "name": "probabilitySummary",
      "outputs": [
        {
          "internalType": "uint256[6]",
          "name": "",
          "type": "uint256[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        }
      ],
      "name": "roll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "rollId",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "totalWagered",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "result",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rollResult",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requestId",
              "type": "uint256"
            }
          ],
          "internalType": "struct RollLens.FullRoll",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IExotic",
          "name": "_exotic",
          "type": "address"
        }
      ],
      "name": "setExotic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "resultsPerPage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        }
      ],
      "name": "userBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "rollId",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "prediction",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "payout",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "betId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rollResult",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "rollFinished",
              "type": "bool"
            }
          ],
          "internalType": "struct RollLens.FullBet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "rollId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "resultsPerPage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        }
      ],
      "name": "userRollBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "rollId",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "prediction",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "payout",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "betId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rollResult",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "rollFinished",
              "type": "bool"
            }
          ],
          "internalType": "struct RollLens.FullBet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9225c4314f0d1b6c1799388b67b33ad70f2eed05e3f26dab6a8052f7585e063a",
  "receipt": {
    "to": null,
    "from": "0x900b9Ac28DBE587c2650a070102bae4306100769",
    "contractAddress": "0x57bc13DE8F8c1252e44eF65039A1A36D42D57994",
    "transactionIndex": 0,
    "gasUsed": "1596885",
    "logsBloom": "0x
    "blockHash": "0x4ab1a9264dd0229d3a3c341bf8c862ad6a64d6e808500fc9b747956cd1939918",
    "transactionHash": "0x9225c4314f0d1b6c1799388b67b33ad70f2eed05e3f26dab6a8052f7585e063a",
    "logs": [],
    "blockNumber": 17488232,
    "cumulativeGasUsed": "1596885",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "a17855460c37f71be9241744e5ae18f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"}],\"name\":\"decimalOdds\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"estimateOdds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exotic\",\"outputs\":[{\"internalType\":\"contract IExotic\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IExotic\",\"name\":\"_exotic\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"}],\"name\":\"probabilitySummary\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"}],\"name\":\"roll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"totalWagered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollResult\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"internalType\":\"struct RollLens.FullRoll\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IExotic\",\"name\":\"_exotic\",\"type\":\"address\"}],\"name\":\"setExotic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resultsPerPage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollResult\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rollFinished\",\"type\":\"bool\"}],\"internalType\":\"struct RollLens.FullBet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resultsPerPage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"userRollBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"rollId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"prediction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rollResult\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"rollFinished\",\"type\":\"bool\"}],\"internalType\":\"struct RollLens.FullBet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Helper contract for fetching data from the roll.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RollLens.sol\":\"RollLens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/RollLens.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n\\nimport \\\"./interfaces/IExotic.sol\\\";\\n\\n\\n/// @title Helper contract for fetching data from the roll.\\ncontract RollLens is Initializable, OwnableUpgradeable {\\n\\n    struct FullRoll {\\n        uint64 rollId;\\n        uint256 totalWagered;\\n        uint256 result;\\n        uint256 rollResult;\\n        uint256 requestId;\\n    }\\n\\n    struct FullBet {\\n        uint64 rollId;\\n        uint256 amount;\\n        address account;\\n        uint8 prediction;\\n        uint256 payout;\\n        bool paid;\\n        uint256 betId;\\n        uint256 rollResult;\\n        bool rollFinished;\\n    }\\n\\n    IExotic public exotic;\\n\\n    function initialize(IExotic _exotic) public initializer {\\n        exotic = _exotic;\\n        __Ownable_init();\\n    }\\n\\n    function setExotic(IExotic _exotic) external onlyOwner {\\n        exotic = _exotic;\\n    }\\n\\n    function roll(uint64 rollId) public view returns (FullRoll memory) {\\n        IExotic.Roll memory _roll = exotic.roll(rollId);\\n        FullRoll memory _returnRoll;\\n        _returnRoll.rollId = rollId;\\n        _returnRoll.totalWagered = exotic.totalWagered(rollId);\\n        _returnRoll.result = _roll.result;\\n        _returnRoll.requestId = _roll.requestId;\\n        if (_roll.result != 0) {\\n            _returnRoll.rollResult = exotic.rollResult(rollId);\\n        }\\n\\n        return _returnRoll;\\n    }\\n\\n    function userBets(\\n        address user, uint256 resultsPerPage, uint256 page\\n    ) public view returns (\\n        FullBet[] memory\\n    ) {\\n        uint256 betCount = exotic.userBetCount(user);\\n        uint256 start;\\n        uint256 end;\\n\\n        // requesting past what we have.\\n        if ((resultsPerPage * page) > betCount) {\\n            start = 0;\\n            end = 0;\\n        } else {\\n            start = betCount - (resultsPerPage * page);\\n            if (start > resultsPerPage) {\\n                end = start - resultsPerPage;\\n            } else {\\n                end = 0;\\n            }\\n            if (start > betCount) {\\n                end = betCount < resultsPerPage ? 0 : betCount - resultsPerPage;\\n                start = betCount;\\n            }\\n        }\\n        FullBet[] memory result = new FullBet[](start - end);\\n        uint256 i;\\n        uint256 counter;\\n        for(i = start; i > end ; i--) {\\n            IExotic.Bet memory _bet = exotic.userBet(user, i - 1);\\n            FullBet memory _returnBet;\\n            _returnBet.rollId = _bet.rollId;\\n            _returnBet.amount = _bet.amount;\\n            _returnBet.account = _bet.account;\\n            _returnBet.prediction = _bet.prediction;\\n            _returnBet.paid = _bet.paid;\\n\\n            uint256 _odds = exotic.odds(_bet.rollId, _bet.prediction);\\n            if (_odds != 0) {\\n                _returnBet.payout = (_bet.amount * 1e10) / _odds;\\n            }\\n            _returnBet.betId = i - 1;\\n            FullRoll memory _roll = roll(_bet.rollId);\\n            _returnBet.rollResult = _roll.rollResult;\\n            _returnBet.rollFinished = _roll.result == 0 ? false : true;\\n            result[counter] = _returnBet;\\n            counter += 1;\\n        }\\n        return result;\\n    }\\n\\n    function probabilitySummary(uint64 rollId) public view returns (uint256[6] memory) {\\n        uint256[6] memory probabilities;\\n        uint8 i;\\n        for (i = 0; i < 6; i++) {\\n            probabilities[i] = exotic.odds(rollId, i);\\n        }\\n        return probabilities;\\n    }\\n\\n    function decimalOdds(uint64 rollId) public view returns (uint256[6] memory) {\\n        uint256[6] memory dOdds;\\n        uint8 i;\\n        for (i = 0; i < 6; i++) {\\n            uint256 o = exotic.odds(rollId, i);\\n            if (o == 0) {\\n                dOdds[i] = 0;\\n            } else {\\n                dOdds[i] = 1e14 / o;\\n            }\\n        }\\n        return dOdds;\\n    }\\n\\n    function estimateOdds(uint64 rollId, uint8 result, uint256 betAmount) public view returns (uint256) {\\n        uint256 currentTotal = exotic.totalWagered(rollId);\\n        uint256 currentWeight = exotic.currentWeight(rollId)[result];\\n        return 1e14 / (((currentWeight + betAmount) * 1e10) / (currentTotal + betAmount));\\n    }\\n\\n    function userRollBets(\\n        uint64 rollId,\\n        address user,\\n        uint256 resultsPerPage,\\n        uint256 page\\n    ) public view returns (\\n        FullBet[] memory\\n    ) {\\n        uint256 betCount = exotic.userRollBetCount(rollId, user);\\n        uint256 start;\\n        uint256 end;\\n        if ((resultsPerPage * page) > betCount) {\\n            start = 0;\\n            end = 0;\\n        } else {\\n            start = betCount - (resultsPerPage * page);\\n            if (start > resultsPerPage) {\\n                end = start - resultsPerPage;\\n            } else {\\n                end = 0;\\n            }\\n            if (start > betCount) {\\n                end = betCount < resultsPerPage ? 0 : betCount - resultsPerPage;\\n                start = betCount;\\n            }\\n        }\\n        FullBet[] memory result = new FullBet[](start - end);\\n        uint256 i;\\n        uint256 counter;\\n        for(i = start; i > end ; i--) {\\n            IExotic.Bet memory _bet = exotic.userRollBet(rollId, user, i - 1);\\n            FullBet memory _returnBet;\\n            _returnBet.rollId = _bet.rollId;\\n            _returnBet.amount = _bet.amount;\\n            _returnBet.account = _bet.account;\\n            _returnBet.prediction = _bet.prediction;\\n            _returnBet.paid = _bet.paid;\\n\\n            _returnBet.payout = exotic.odds(_bet.rollId, _bet.prediction) != 0 ?\\n                (_bet.amount * 1e10) /  exotic.odds(_bet.rollId, _bet.prediction) :\\n                0;\\n\\n            _returnBet.betId = exotic.userRollBetId(user, rollId, i-1);\\n\\n            FullRoll memory _roll = roll(_bet.rollId);\\n            _returnBet.rollResult = _roll.rollResult;\\n            _returnBet.rollFinished = _roll.result == 0 ? false : true;\\n            result[counter] = _returnBet;\\n            counter += 1;\\n        }\\n        return result;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x6cff0ea856500a31a9f1c0cc2936aa8cd2b4df618ff0ae6f166f648b1a0c151a\",\"license\":\"Unlicense\"},\"contracts/interfaces/IExotic.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n\\ninterface IExotic{\\n\\n    struct Bet {\\n        uint256 amount;\\n        address account;\\n        uint64 rollId;\\n        uint8 prediction;\\n        bool paid;\\n    }\\n\\n    struct Roll {\\n        uint256 result;\\n        uint256 requestId;\\n    }\\n\\n    function endRoll(uint256 requestId, uint256[] memory randomWords) external;\\n    function userBetCount(address userId) external view returns (uint256);\\n    function userRollBetCount(uint256 rollId, address user) external view returns (uint256);\\n    function roll(uint64 rollId) external view returns (Roll memory);\\n    function frequency() external view returns (uint256);\\n    function userBet(address user, uint256 betId) external view returns (Bet memory);\\n    function rollResult(uint64 rollId) external view returns (uint256);\\n    function totalWagered(uint64 rollId) external view returns (uint256);\\n    function odds(uint64 rollId, uint8 result) external view returns (uint256);\\n    function userRollBet(\\n        uint64 rollId, address user, uint256 betId\\n    ) external view returns (\\n        Bet memory\\n    );\\n    function currentWeight(uint64 rollId) external view returns (uint256[6] memory);\\n    function userRollBetId(address user, uint64 rollId, uint256 rollBetId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf3a902730371d22f8344f480511d5e0342f55e11a71a7c16be0ff55d9ea7f856\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611bfd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063c4d66de811610081578063f2fde38b1161005b578063f2fde38b1461020a578063f754fd961461021d578063fa09b3411461023057600080fd5b8063c4d66de8146101b6578063d195a054146101c9578063e40eeebb146101e957600080fd5b806373c28dc6116100b257806373c28dc61461015e578063835f3eb41461017e5780638da5cb5b1461019157600080fd5b80634740945c146100d9578063591378c4146100ee578063715018a614610156575b600080fd5b6100ec6100e7366004611749565b610243565b005b6101016100fc36600461191d565b6102d1565b60405161014d9190600060a08201905067ffffffffffffffff83511682526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b60405180910390f35b6100ec61053c565b61017161016c36600461191d565b6105a2565b60405161014d9190611a73565b61017161018c36600461191d565b6106bd565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161014d565b6100ec6101c4366004611749565b610796565b6101dc6101d7366004611766565b610834565b60405161014d91906119c1565b6101fc6101f7366004611980565b610c83565b60405190815260200161014d565b6100ec610218366004611749565b610e13565b60655461019e906001600160a01b031681565b6101dc61023e36600461193a565b610ef5565b6033546001600160a01b031633146102a25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61030d6040518060a00160405280600067ffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b6065546040517f591378c400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff841660048201526000916001600160a01b03169063591378c490602401604080518083038186803b15801561037357600080fd5b505afa158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab91906118b5565b90506103e96040518060a00160405280600067ffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b67ffffffffffffffff8416808252606554604051633969f80360e01b815260048101929092526001600160a01b031690633969f8039060240160206040518083038186803b15801561043a57600080fd5b505afa15801561044e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104729190611904565b602080830191909152825160408301528201516080820152815115610535576065546040517fa1aa2b5b00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff861660048201526001600160a01b039091169063a1aa2b5b9060240160206040518083038186803b1580156104f757600080fd5b505afa15801561050b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052f9190611904565b60608201525b9392505050565b6033546001600160a01b031633146105965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b6105a060006114b6565b565b6105aa61172b565b6105b261172b565b60005b60068160ff1610156106b6576065546040516332c4d4f160e11b815267ffffffffffffffff8616600482015260ff831660248201526000916001600160a01b031690636589a9e29060440160206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106509190611904565b905080610678576000838360ff166006811061066e5761066e611b61565b60200201526106a3565b61068881655af3107a4000611abc565b838360ff166006811061069d5761069d611b61565b60200201525b50806106ae81611b2b565b9150506105b5565b5092915050565b6106c561172b565b6106cd61172b565b60005b60068160ff1610156106b6576065546040516332c4d4f160e11b815267ffffffffffffffff8616600482015260ff831660248201526001600160a01b0390911690636589a9e29060440160206040518083038186803b15801561073257600080fd5b505afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a9190611904565b828260ff166006811061077f5761077f611b61565b60200201528061078e81611b2b565b9150506106d0565b60006107a26001611515565b905080156107ba576000805461ff0019166101001790555b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790556107ea611649565b8015610830576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6065546040517ff408a23a0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260609260009291169063f408a23a9060240160206040518083038186803b15801561089757600080fd5b505afa1580156108ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cf9190611904565b9050600080826108df8688611ade565b11156108f05750600090508061094a565b6108fa8587611ade565b6109049084611afd565b91508582111561091f576109188683611afd565b9050610923565b5060005b8282111561094a578583106109415761093c8684611afd565b610944565b60005b90508291505b60006109568284611afd565b67ffffffffffffffff81111561096e5761096e611b77565b6040519080825280602002602001820160405280156109e557816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820152825260001990920191018161098c5790505b5090508260005b83821115610c75576065546000906001600160a01b0316634195ab8e8c610a14600187611afd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260440160a06040518083038186803b158015610a7057600080fd5b505afa158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa89190611821565b6040805161012081018252600080825260208083018281528385018381526060808601858152608080880187905260a0880187815260c0890188905260e0890188905261010089018890528a8a01805167ffffffffffffffff9081168b528c51909752968b01516001600160a01b03908116909552928a01805160ff908116909352908a015115159092526065549451915197516332c4d4f160e11b815291909316600482015295909116602486015294955091939092911690636589a9e29060440160206040518083038186803b158015610b8357600080fd5b505afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb9190611904565b90508015610be65782518190610bd6906402540be400611ade565b610be09190611abc565b60808301525b610bf1600186611afd565b60c08301526040830151600090610c07906102d1565b606081015160e0850152604081015190915015610c25576001610c28565b60005b151561010084015286518390889087908110610c4657610c46611b61565b6020908102919091010152610c5c600186611aa4565b9450505050508180610c6d90611b14565b9250506109ec565b509098975050505050505050565b606554604051633969f80360e01b815267ffffffffffffffff8516600482015260009182916001600160a01b0390911690633969f8039060240160206040518083038186803b158015610cd557600080fd5b505afa158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0d9190611904565b6065546040517f72b51dfa00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff881660048201529192506000916001600160a01b03909116906372b51dfa9060240160c06040518083038186803b158015610d7957600080fd5b505afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db1919061179b565b8560ff1660068110610dc557610dc5611b61565b60200201519050610dd68483611aa4565b610de08583611aa4565b610def906402540be400611ade565b610df99190611abc565b610e0990655af3107a4000611abc565b9695505050505050565b6033546001600160a01b03163314610e6d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b6001600160a01b038116610ee95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610299565b610ef2816114b6565b50565b6065546040517f46b697fe00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff861660048201526001600160a01b0385811660248301526060926000929116906346b697fe9060440160206040518083038186803b158015610f6857600080fd5b505afa158015610f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa09190611904565b905060008082610fb08688611ade565b1115610fc15750600090508061101b565b610fcb8587611ade565b610fd59084611afd565b915085821115610ff057610fe98683611afd565b9050610ff4565b5060005b8282111561101b578583106110125761100d8684611afd565b611015565b60005b90508291505b60006110278284611afd565b67ffffffffffffffff81111561103f5761103f611b77565b6040519080825280602002602001820160405280156110b657816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820152825260001990920191018161105d5790505b5090508260005b838211156114a7576065546000906001600160a01b031663f50292548d8d6110e6600188611afd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815267ffffffffffffffff90931660048401526001600160a01b039091166024830152604482015260640160a06040518083038186803b15801561115357600080fd5b505afa158015611167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118b9190611821565b6040805161012081018252600080825260208083018281528385018381526060808601858152608080880187905260a0880187815260c0890188905260e08901889052610100890197909752898901805167ffffffffffffffff9081168a528b51909652958a01516001600160a01b03908116909452918901805160ff9081169092529189015115159095526065549351905196516332c4d4f160e11b815292166004830152949092166024830152939450909290911690636589a9e29060440160206040518083038186803b15801561126457600080fd5b505afa158015611278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129c9190611904565b6112a757600061135c565b606554604083810151606085015191516332c4d4f160e11b815267ffffffffffffffff909116600482015260ff90911660248201526001600160a01b0390911690636589a9e29060440160206040518083038186803b15801561130957600080fd5b505afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113419190611904565b8251611352906402540be400611ade565b61135c9190611abc565b60808201526065546001600160a01b0316636390e63b8d8f61137f600189611afd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015267ffffffffffffffff9091166024830152604482015260640160206040518083038186803b1580156113ec57600080fd5b505afa158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190611904565b60c0820152604082015160009061143a906102d1565b606081015160e084015260408101519091501561145857600161145b565b60005b15156101008301528551829087908690811061147957611479611b61565b602090810291909101015261148f600185611aa4565b9350505050818061149f90611b14565b9250506110bd565b50909998505050505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156115b2578160ff1660011480156115385750303b155b6115aa5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610299565b506000919050565b60005460ff80841691161061162f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610299565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166116b45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610299565b6105a0600054610100900460ff166117225760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610299565b6105a0336114b6565b6040518060c001604052806006906020820280368337509192915050565b60006020828403121561175b57600080fd5b813561053581611b8d565b60008060006060848603121561177b57600080fd5b833561178681611b8d565b95602085013595506040909401359392505050565b600060c082840312156117ad57600080fd5b82601f8301126117bc57600080fd5b60405160c0810181811067ffffffffffffffff821117156117df576117df611b77565b604052808360c081018610156117f457600080fd5b60005b60068110156118165781518352602092830192909101906001016117f7565b509195945050505050565b600060a0828403121561183357600080fd5b60405160a0810181811067ffffffffffffffff8211171561185657611856611b77565b60405282518152602083015161186b81611b8d565b6020820152604083015161187e81611ba2565b6040820152606083015161189181611bb8565b6060820152608083015180151581146118a957600080fd5b60808201529392505050565b6000604082840312156118c757600080fd5b6040516040810181811067ffffffffffffffff821117156118ea576118ea611b77565b604052825181526020928301519281019290925250919050565b60006020828403121561191657600080fd5b5051919050565b60006020828403121561192f57600080fd5b813561053581611ba2565b6000806000806080858703121561195057600080fd5b843561195b81611ba2565b9350602085013561196b81611b8d565b93969395505050506040820135916060013590565b60008060006060848603121561199557600080fd5b83356119a081611ba2565b925060208401356119b081611bb8565b929592945050506040919091013590565b602080825282518282018190526000919060409081850190868401855b82811015611a66578151805167ffffffffffffffff1685528681015187860152858101516001600160a01b03168686015260608082015160ff16908601526080808201519086015260a08082015115159086015260c0808201519086015260e080820151908601526101009081015115159085015261012090930192908501906001016119de565b5091979650505050505050565b60c08101818360005b6006811015611a9b578151835260209283019290910190600101611a7c565b50505092915050565b60008219821115611ab757611ab7611b4b565b500190565b600082611ad957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611af857611af8611b4b565b500290565b600082821015611b0f57611b0f611b4b565b500390565b600081611b2357611b23611b4b565b506000190190565b600060ff821660ff811415611b4257611b42611b4b565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ef257600080fd5b67ffffffffffffffff81168114610ef257600080fd5b60ff81168114610ef257600080fdfea2646970667358221220c552d2a1867b15a4c628f79ff86adacddea4d85dbdbf1635b600ee182bb187be64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063c4d66de811610081578063f2fde38b1161005b578063f2fde38b1461020a578063f754fd961461021d578063fa09b3411461023057600080fd5b8063c4d66de8146101b6578063d195a054146101c9578063e40eeebb146101e957600080fd5b806373c28dc6116100b257806373c28dc61461015e578063835f3eb41461017e5780638da5cb5b1461019157600080fd5b80634740945c146100d9578063591378c4146100ee578063715018a614610156575b600080fd5b6100ec6100e7366004611749565b610243565b005b6101016100fc36600461191d565b6102d1565b60405161014d9190600060a08201905067ffffffffffffffff83511682526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b60405180910390f35b6100ec61053c565b61017161016c36600461191d565b6105a2565b60405161014d9190611a73565b61017161018c36600461191d565b6106bd565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161014d565b6100ec6101c4366004611749565b610796565b6101dc6101d7366004611766565b610834565b60405161014d91906119c1565b6101fc6101f7366004611980565b610c83565b60405190815260200161014d565b6100ec610218366004611749565b610e13565b60655461019e906001600160a01b031681565b6101dc61023e36600461193a565b610ef5565b6033546001600160a01b031633146102a25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61030d6040518060a00160405280600067ffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b6065546040517f591378c400000000000000000000000000000000000000000000000000000000815267ffffffffffffffff841660048201526000916001600160a01b03169063591378c490602401604080518083038186803b15801561037357600080fd5b505afa158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab91906118b5565b90506103e96040518060a00160405280600067ffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b67ffffffffffffffff8416808252606554604051633969f80360e01b815260048101929092526001600160a01b031690633969f8039060240160206040518083038186803b15801561043a57600080fd5b505afa15801561044e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104729190611904565b602080830191909152825160408301528201516080820152815115610535576065546040517fa1aa2b5b00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff861660048201526001600160a01b039091169063a1aa2b5b9060240160206040518083038186803b1580156104f757600080fd5b505afa15801561050b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052f9190611904565b60608201525b9392505050565b6033546001600160a01b031633146105965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b6105a060006114b6565b565b6105aa61172b565b6105b261172b565b60005b60068160ff1610156106b6576065546040516332c4d4f160e11b815267ffffffffffffffff8616600482015260ff831660248201526000916001600160a01b031690636589a9e29060440160206040518083038186803b15801561061857600080fd5b505afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106509190611904565b905080610678576000838360ff166006811061066e5761066e611b61565b60200201526106a3565b61068881655af3107a4000611abc565b838360ff166006811061069d5761069d611b61565b60200201525b50806106ae81611b2b565b9150506105b5565b5092915050565b6106c561172b565b6106cd61172b565b60005b60068160ff1610156106b6576065546040516332c4d4f160e11b815267ffffffffffffffff8616600482015260ff831660248201526001600160a01b0390911690636589a9e29060440160206040518083038186803b15801561073257600080fd5b505afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a9190611904565b828260ff166006811061077f5761077f611b61565b60200201528061078e81611b2b565b9150506106d0565b60006107a26001611515565b905080156107ba576000805461ff0019166101001790555b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790556107ea611649565b8015610830576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6065546040517ff408a23a0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260609260009291169063f408a23a9060240160206040518083038186803b15801561089757600080fd5b505afa1580156108ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cf9190611904565b9050600080826108df8688611ade565b11156108f05750600090508061094a565b6108fa8587611ade565b6109049084611afd565b91508582111561091f576109188683611afd565b9050610923565b5060005b8282111561094a578583106109415761093c8684611afd565b610944565b60005b90508291505b60006109568284611afd565b67ffffffffffffffff81111561096e5761096e611b77565b6040519080825280602002602001820160405280156109e557816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820152825260001990920191018161098c5790505b5090508260005b83821115610c75576065546000906001600160a01b0316634195ab8e8c610a14600187611afd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260440160a06040518083038186803b158015610a7057600080fd5b505afa158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa89190611821565b6040805161012081018252600080825260208083018281528385018381526060808601858152608080880187905260a0880187815260c0890188905260e0890188905261010089018890528a8a01805167ffffffffffffffff9081168b528c51909752968b01516001600160a01b03908116909552928a01805160ff908116909352908a015115159092526065549451915197516332c4d4f160e11b815291909316600482015295909116602486015294955091939092911690636589a9e29060440160206040518083038186803b158015610b8357600080fd5b505afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb9190611904565b90508015610be65782518190610bd6906402540be400611ade565b610be09190611abc565b60808301525b610bf1600186611afd565b60c08301526040830151600090610c07906102d1565b606081015160e0850152604081015190915015610c25576001610c28565b60005b151561010084015286518390889087908110610c4657610c46611b61565b6020908102919091010152610c5c600186611aa4565b9450505050508180610c6d90611b14565b9250506109ec565b509098975050505050505050565b606554604051633969f80360e01b815267ffffffffffffffff8516600482015260009182916001600160a01b0390911690633969f8039060240160206040518083038186803b158015610cd557600080fd5b505afa158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0d9190611904565b6065546040517f72b51dfa00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff881660048201529192506000916001600160a01b03909116906372b51dfa9060240160c06040518083038186803b158015610d7957600080fd5b505afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db1919061179b565b8560ff1660068110610dc557610dc5611b61565b60200201519050610dd68483611aa4565b610de08583611aa4565b610def906402540be400611ade565b610df99190611abc565b610e0990655af3107a4000611abc565b9695505050505050565b6033546001600160a01b03163314610e6d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610299565b6001600160a01b038116610ee95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610299565b610ef2816114b6565b50565b6065546040517f46b697fe00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff861660048201526001600160a01b0385811660248301526060926000929116906346b697fe9060440160206040518083038186803b158015610f6857600080fd5b505afa158015610f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa09190611904565b905060008082610fb08688611ade565b1115610fc15750600090508061101b565b610fcb8587611ade565b610fd59084611afd565b915085821115610ff057610fe98683611afd565b9050610ff4565b5060005b8282111561101b578583106110125761100d8684611afd565b611015565b60005b90508291505b60006110278284611afd565b67ffffffffffffffff81111561103f5761103f611b77565b6040519080825280602002602001820160405280156110b657816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820152825260001990920191018161105d5790505b5090508260005b838211156114a7576065546000906001600160a01b031663f50292548d8d6110e6600188611afd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815267ffffffffffffffff90931660048401526001600160a01b039091166024830152604482015260640160a06040518083038186803b15801561115357600080fd5b505afa158015611167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118b9190611821565b6040805161012081018252600080825260208083018281528385018381526060808601858152608080880187905260a0880187815260c0890188905260e08901889052610100890197909752898901805167ffffffffffffffff9081168a528b51909652958a01516001600160a01b03908116909452918901805160ff9081169092529189015115159095526065549351905196516332c4d4f160e11b815292166004830152949092166024830152939450909290911690636589a9e29060440160206040518083038186803b15801561126457600080fd5b505afa158015611278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129c9190611904565b6112a757600061135c565b606554604083810151606085015191516332c4d4f160e11b815267ffffffffffffffff909116600482015260ff90911660248201526001600160a01b0390911690636589a9e29060440160206040518083038186803b15801561130957600080fd5b505afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113419190611904565b8251611352906402540be400611ade565b61135c9190611abc565b60808201526065546001600160a01b0316636390e63b8d8f61137f600189611afd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03909316600484015267ffffffffffffffff9091166024830152604482015260640160206040518083038186803b1580156113ec57600080fd5b505afa158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190611904565b60c0820152604082015160009061143a906102d1565b606081015160e084015260408101519091501561145857600161145b565b60005b15156101008301528551829087908690811061147957611479611b61565b602090810291909101015261148f600185611aa4565b9350505050818061149f90611b14565b9250506110bd565b50909998505050505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156115b2578160ff1660011480156115385750303b155b6115aa5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610299565b506000919050565b60005460ff80841691161061162f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610299565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166116b45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610299565b6105a0600054610100900460ff166117225760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610299565b6105a0336114b6565b6040518060c001604052806006906020820280368337509192915050565b60006020828403121561175b57600080fd5b813561053581611b8d565b60008060006060848603121561177b57600080fd5b833561178681611b8d565b95602085013595506040909401359392505050565b600060c082840312156117ad57600080fd5b82601f8301126117bc57600080fd5b60405160c0810181811067ffffffffffffffff821117156117df576117df611b77565b604052808360c081018610156117f457600080fd5b60005b60068110156118165781518352602092830192909101906001016117f7565b509195945050505050565b600060a0828403121561183357600080fd5b60405160a0810181811067ffffffffffffffff8211171561185657611856611b77565b60405282518152602083015161186b81611b8d565b6020820152604083015161187e81611ba2565b6040820152606083015161189181611bb8565b6060820152608083015180151581146118a957600080fd5b60808201529392505050565b6000604082840312156118c757600080fd5b6040516040810181811067ffffffffffffffff821117156118ea576118ea611b77565b604052825181526020928301519281019290925250919050565b60006020828403121561191657600080fd5b5051919050565b60006020828403121561192f57600080fd5b813561053581611ba2565b6000806000806080858703121561195057600080fd5b843561195b81611ba2565b9350602085013561196b81611b8d565b93969395505050506040820135916060013590565b60008060006060848603121561199557600080fd5b83356119a081611ba2565b925060208401356119b081611bb8565b929592945050506040919091013590565b602080825282518282018190526000919060409081850190868401855b82811015611a66578151805167ffffffffffffffff1685528681015187860152858101516001600160a01b03168686015260608082015160ff16908601526080808201519086015260a08082015115159086015260c0808201519086015260e080820151908601526101009081015115159085015261012090930192908501906001016119de565b5091979650505050505050565b60c08101818360005b6006811015611a9b578151835260209283019290910190600101611a7c565b50505092915050565b60008219821115611ab757611ab7611b4b565b500190565b600082611ad957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611af857611af8611b4b565b500290565b600082821015611b0f57611b0f611b4b565b500390565b600081611b2357611b23611b4b565b506000190190565b600060ff821660ff811415611b4257611b42611b4b565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ef257600080fd5b67ffffffffffffffff81168114610ef257600080fd5b60ff81168114610ef257600080fdfea2646970667358221220c552d2a1867b15a4c628f79ff86adacddea4d85dbdbf1635b600ee182bb187be64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Helper contract for fetching data from the roll.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 277,
        "contract": "contracts/RollLens.sol:RollLens",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 280,
        "contract": "contracts/RollLens.sol:RollLens",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 774,
        "contract": "contracts/RollLens.sol:RollLens",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 157,
        "contract": "contracts/RollLens.sol:RollLens",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 269,
        "contract": "contracts/RollLens.sol:RollLens",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5444,
        "contract": "contracts/RollLens.sol:RollLens",
        "label": "exotic",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IExotic)6368"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IExotic)6368": {
        "encoding": "inplace",
        "label": "contract IExotic",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}